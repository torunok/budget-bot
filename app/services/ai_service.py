# ============================================
# FILE: app/services/ai_service.py
# ============================================
"""
–°–µ—Ä–≤—ñ—Å –¥–ª—è —Ä–æ–±–æ—Ç–∏ –∑ AI (Gemini)
"""

import asyncio
import logging
import re
from typing import List
from google import generativeai as genai

from app.config.settings import config

logger = logging.getLogger(__name__)


class AIService:
    """–°–µ—Ä–≤—ñ—Å –¥–ª—è AI –∞–Ω–∞–ª—ñ–∑—É"""
    
    def __init__(self):
        if config.GEMINI_API_KEY and config.ENABLE_AI_ANALYSIS:
            try:
                genai.configure(api_key=config.GEMINI_API_KEY)
                self.model = genai.GenerativeModel("gemini-1.5-pro-latest")
                self.enabled = True
                logger.info("‚úÖ Gemini AI initialized")
            except Exception as e:
                logger.error(f"‚ùå Failed to initialize Gemini: {e}")
                self.enabled = False
        else:
            self.enabled = False
            logger.warning("AI analysis is disabled")
    
    async def analyze_finances(self, transactions: List[dict]) -> str:
        """–ê–Ω–∞–ª—ñ–∑—É—î —Ñ—ñ–Ω–∞–Ω—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
        if not self.enabled:
            return "ü§ñ AI-–∞–Ω–∞–ª—ñ–∑ —Ç–∏–º—á–∞—Å–æ–≤–æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."
        
        # –§–æ—Ä–º—É—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É
        transactions_str = self._format_transactions(transactions)
        
        prompt = self._build_analysis_prompt(transactions_str)
        
        try:
            response = await asyncio.to_thread(
                self.model.generate_content,
                prompt
            )
            
            # –û—á–∏—â–∞—î–º–æ –≤—ñ–¥ markdown —Ñ–æ—Ä–º–∞—Ç—É–≤–∞–Ω–Ω—è
            clean_text = re.sub(r"[*#]+", "", response.text)
            return clean_text
            
        except Exception as e:
            logger.error(f"AI analysis error: {e}")
            return "–í–∏–±–∞—á—Ç–µ, –≤–∏–Ω–∏–∫–ª–∞ –ø–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª—ñ–∑—ñ. –°–ø—Ä–æ–±—É–π—Ç–µ –ø—ñ–∑–Ω—ñ—à–µ."
    
    async def get_budget_recommendations(self, transactions: List[dict], income: float) -> str:
        """–û—Ç—Ä–∏–º—É—î —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –ø–æ –±—é–¥–∂–µ—Ç—É"""
        if not self.enabled:
            return "ü§ñ AI-—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ñ."
        
        transactions_str = self._format_transactions(transactions)
        
        prompt = f"""
        –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—É —Å–∏—Ç—É–∞—Ü—ñ—é –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —Ç–∞ –¥–∞–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó.
        
        –ú—ñ—Å—è—á–Ω–∏–π –¥–æ—Ö—ñ–¥: {income} UAH
        
        –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:
        {transactions_str}
        
        –î–∞–π –∫–æ—Ä–æ—Ç–∫—ñ, –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó:
        1. –û–ø—Ç–∏–º–∞–ª—å–Ω–∏–π —Ä–æ–∑–ø–æ–¥—ñ–ª –±—é–¥–∂–µ—Ç—É –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        2. –ù–∞ —á–æ–º—É –º–æ–∂–Ω–∞ –∑–∞–æ—â–∞–¥–∏—Ç–∏
        3. –°–∫—ñ–ª—å–∫–∏ –≤—ñ–¥–∫–ª–∞–¥–∞—Ç–∏ —â–æ–º—ñ—Å—è—Ü—è
        4. –ü–æ–ø–µ—Ä–µ–¥–∂–µ–Ω–Ω—è –ø—Ä–æ —Ä–∏–∑–∏–∫–∏
        
        –ë—É–¥—å —Å—Ç–∏—Å–ª–∏–º —Ç–∞ –ø—Ä–∞–∫—Ç–∏—á–Ω–∏–º. –ú–∞–∫—Å–∏–º—É–º 500 —Å–ª—ñ–≤.
        """
        
        try:
            response = await asyncio.to_thread(
                self.model.generate_content,
                prompt
            )
            return re.sub(r"[*#]+", "", response.text)
        except Exception as e:
            logger.error(f"Recommendations error: {e}")
            return "–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ–π."
    
    async def predict_expenses(self, transactions: List[dict]) -> str:
        """–ü—Ä–æ–≥–Ω–æ–∑—É—î –º–∞–π–±—É—Ç–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏"""
        if not self.enabled:
            return "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π."
        
        transactions_str = self._format_transactions(transactions[-30:])  # Last 30 transactions
        
        prompt = f"""
        –ù–∞ –æ—Å–Ω–æ–≤—ñ —ñ—Å—Ç–æ—Ä—ñ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π –º—ñ—Å—è—Ü—å, –∑—Ä–æ–±–∏ –ø—Ä–æ–≥–Ω–æ–∑ –≤–∏—Ç—Ä–∞—Ç –Ω–∞ –Ω–∞—Å—Ç—É–ø–Ω–∏–π –º—ñ—Å—è—Ü—å.
        
        {transactions_str}
        
        –í–∫–∞–∂–∏:
        1. –û—á—ñ–∫—É–≤–∞–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö
        2. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞ –≤–∏—Ç—Ä–∞—Ç
        3. –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        
        –ë—É–¥—å –∫–æ—Ä–æ—Ç–∫–∏–º —Ç–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º.
        """
        
        try:
            response = await asyncio.to_thread(
                self.model.generate_content,
                prompt
            )
            return re.sub(r"[*#]+", "", response.text)
        except Exception as e:
            logger.error(f"Prediction error: {e}")
            return "–ü–æ–º–∏–ª–∫–∞ –ø—Ä–æ–≥–Ω–æ–∑—É–≤–∞–Ω–Ω—è."
    
    def _format_transactions(self, transactions: List[dict]) -> str:
        """–§–æ—Ä–º–∞—Ç—É—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è AI"""
        lines = []
        for t in transactions:
            date = t.get('date', '')
            amount = t.get('amount', 0)
            category = t.get('category', '')
            note = t.get('note', '')
            lines.append(f"{date} | {amount} UAH | {category} | {note}")
        return "\n".join(lines)
    
    def _build_analysis_prompt(self, transactions_str: str) -> str:
        """–ë—É–¥—É—î –ø—Ä–æ–º–ø—Ç –¥–ª—è –∞–Ω–∞–ª—ñ–∑—É"""
        return f"""
        –¢–∏ - –¥–æ—Å–≤—ñ–¥—á–µ–Ω–∏–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∫–æ–Ω—Å—É–ª—å—Ç–∞–Ω—Ç. –ü—Ä–æ–∞–Ω–∞–ª—ñ–∑—É–π —Ñ—ñ–Ω–∞–Ω—Å–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ –¥–µ—Ç–∞–ª—å–Ω–æ.
        
        –¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:
        {transactions_str}
        
        –ù–∞–¥–∞–π –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–∏–π –∞–Ω–∞–ª—ñ–∑:
        
        üìä –ó–ê–ì–ê–õ–¨–ù–ê –ö–ê–†–¢–ò–ù–ê
        - –°–ø—ñ–≤–≤—ñ–¥–Ω–æ—à–µ–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤/–≤–∏—Ç—Ä–∞—Ç
        - –û—Å–Ω–æ–≤–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç
        - –§—ñ–Ω–∞–Ω—Å–æ–≤–∞ –¥–∏—Å—Ü–∏–ø–ª—ñ–Ω–∞
        
        üí° –ì–û–õ–û–í–ù–Ü –í–ò–°–ù–û–í–ö–ò
        - –°–ª–∞–±–∫—ñ –º—ñ—Å—Ü—è –±—é–¥–∂–µ—Ç—É
        - –ù–µ–µ—Ñ–µ–∫—Ç–∏–≤–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏
        - –ú–æ–∂–ª–∏–≤–æ—Å—Ç—ñ –¥–ª—è –æ–ø—Ç–∏–º—ñ–∑–∞—Ü—ñ—ó
        
        üéØ –ö–û–ù–ö–†–ï–¢–ù–Ü –†–ï–ö–û–ú–ï–ù–î–ê–¶–Ü–á
        - –î–µ –µ–∫–æ–Ω–æ–º–∏—Ç–∏ (–∑ —Ü–∏—Ñ—Ä–∞–º–∏)
        - –Ø–∫ –ø–µ—Ä–µ—Ä–æ–∑–ø–æ–¥—ñ–ª–∏—Ç–∏ –±—é–¥–∂–µ—Ç
        - –¶—ñ–ª—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å
        
        ‚ö†Ô∏è –ü–û–ü–ï–†–ï–î–ñ–ï–ù–ù–Ø
        - –§—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ä–∏–∑–∏–∫–∏
        - –®–∫—ñ–¥–ª–∏–≤—ñ –∑–≤–∏—á–∫–∏ –≤–∏—Ç—Ä–∞—Ç
        
        –ü–∏—à–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–æ–≤–∞–Ω–æ, –ª–∞–∫–æ–Ω—ñ—á–Ω–æ, –∑ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–∏–º–∏ —Ü–∏—Ñ—Ä–∞–º–∏ —Ç–∞ –ø–æ—Ä–∞–¥–∞–º–∏.
        –ë–µ–∑ –∑–≥–∞–¥–∫–∏ —Ö—Ç–æ —Ç–∏ - –ø—Ä–æ—Å—Ç–æ —Ä–æ–±–∏ —Å–≤–æ—é —Ä–æ–±–æ—Ç—É –ø—Ä–æ—Ñ–µ—Å—ñ–π–Ω–æ.
        """


# Singleton
ai_service = AIService()