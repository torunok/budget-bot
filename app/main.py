"""
–¢–æ—á–∫–∞ –≤—Ö–æ–¥—É –¥–æ–¥–∞—Ç–∫—É
–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook —Ç–∞ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
"""

import asyncio
import logging
from aiohttp import web
from aiogram import Bot, Dispatcher
from aiogram.webhook.aiohttp_server import SimpleRequestHandler, setup_application

from app.config.settings import config, logger
from app.core.bot import dp, bot # –ü—Ä–∏–ø—É—Å–∫–∞—î—Ç—å—Å—è, —â–æ dp —Ç–∞ bot —Ç—É—Ç –≤–∂–µ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω—ñ
from app.handlers import register_all_handlers
from app.scheduler.tasks import setup_scheduler
from app.middlewares import setup_middlewares # –ü—Ä–∏–ø—É—Å–∫–∞—î—Ç—å—Å—è, —â–æ –≤–∏ –π–æ–≥–æ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ


async def on_startup(app: web.Application) -> None:
    """–î—ñ—ó –ø—Ä–∏ –∑–∞–ø—É—Å–∫—É –±–æ—Ç–∞: –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è Webhook —Ç–∞ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞"""

    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è webhook
    try:
        webhook_result = await bot.set_webhook(
            url=config.WEBHOOK_URL,
            secret_token=config.WEBHOOK_SECRET_TOKEN,
            drop_pending_updates=True
        )
        if webhook_result:
            logger.info(f"‚úÖ Webhook set to: {config.WEBHOOK_URL}")
        else:
            logger.critical(f"‚ùå Webhook set returned False from aiogram!") 
            raise Exception("Telegram API returned non-success on set_webhook") 
            
    except Exception as e: 
        logger.critical(f"‚ùå Failed to set webhook! {e}", exc_info=True)
        raise

    # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞ –∑–∞–¥–∞—á
    scheduler = setup_scheduler(bot)
    app['scheduler'] = scheduler
    logger.info("‚úÖ Scheduler started")


async def on_shutdown(app: web.Application) -> None:
    """–î—ñ—ó –ø—Ä–∏ –∑—É–ø–∏–Ω—Ü—ñ –±–æ—Ç–∞"""
    logger.info("‚èπÔ∏è Shutting down bot...")
    
    # –ó—É–ø–∏–Ω–∫–∞ –ø–ª–∞–Ω—É–≤–∞–ª—å–Ω–∏–∫–∞
    if 'scheduler' in app:
        app['scheduler'].shutdown()
    
    # –í–∏–¥–∞–ª–µ–Ω–Ω—è webhook
    await bot.delete_webhook(drop_pending_updates=True)
    await bot.session.close()
    
    logger.info("‚úÖ Bot shutdown complete")


async def health_check(request: web.Request) -> web.Response:
    """Health check endpoint –¥–ª—è Render.com"""
    return web.Response(text="OK", status=200)


def create_app() -> web.Application:
    """–°—Ç–≤–æ—Ä–µ–Ω–Ω—è aiohttp –¥–æ–¥–∞—Ç–∫—É"""
    
    # üî• –í–ò–ü–†–ê–í–õ–ï–ù–û üî•: –ü–µ—Ä–µ–¥–∞—î–º–æ 'logger' —è–∫ –¥—Ä—É–≥–∏–π –∞—Ä–≥—É–º–µ–Ω—Ç, –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–æ –¥–æ –∑–º—ñ–Ω —É __init__.py
    register_all_handlers(dp, logger)
    logger.info("‚úÖ All handlers successfully registered in Dispatcher.")
    
    app = web.Application()
    
    # Webhook handler
    webhook_handler = SimpleRequestHandler(
        dispatcher=dp,
        bot=bot,
        secret_token=config.WEBHOOK_SECRET_TOKEN,
    )
    # WEBHOOK_PATH –ø–æ–≤–∏–Ω–µ–Ω –≤—ñ–¥–ø–æ–≤—ñ–¥–∞—Ç–∏ —à–ª—è—Ö—É, —è–∫–∏–π –≤–∏ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î—Ç–µ —É WEBHOOK_URL
    webhook_handler.register(app, path=config.WEBHOOK_PATH) 
    
    # Health check endpoints
    app.router.add_get("/health", health_check)
    app.router.add_get("/", health_check)
    
    # Startup/shutdown hooks
    app.on_startup.append(on_startup)
    app.on_shutdown.append(on_shutdown)
    
    # –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è aiogram
    setup_application(app, dp, bot=bot)
    
    return app


def main():
    """–ó–∞–ø—É—Å–∫ –¥–æ–¥–∞—Ç–∫—É"""
    try:
        logger.info(f"üåç Environment: {config.SENTRY_ENVIRONMENT}")
        logger.info(f"üîß Starting web server on {config.WEB_SERVER_HOST}:{config.WEB_SERVER_PORT}")
        
        app = create_app()
        web.run_app(
            app,
            host=config.WEB_SERVER_HOST,
            port=config.WEB_SERVER_PORT,
            print=None  # –í–∏–º–∫–Ω—É—Ç–∏ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –≤–∏–≤—ñ–¥ aiohttp
        )
    except Exception as e:
        logger.critical(f"‚ùå Failed to start bot: {e}", exc_info=True)
        raise


if __name__ == "__main__":
    main()
