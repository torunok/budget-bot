#File: app/scheduler/tasks.py

"""
–ó–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–¥–∞—á—ñ (cron jobs)
"""

import logging
from datetime import datetime
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

from app.config.settings import config
from app.services.sheets_service import sheets_service

logger = logging.getLogger(__name__)


async def send_daily_reminders(bot: Bot):
    """–ù–∞–¥—Å–∏–ª–∞—î —â–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
    logger.info("üìÖ Running scheduled task: daily reminders")
    
    try:
        user_ids = sheets_service.get_reminder_users()
        
        reminder_text = (
            "üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è</b>\n\n"
            "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –∑–∞–ø–∏—Å–∞—Ç–∏ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ –≤–∏—Ç—Ä–∞—Ç–∏ —Ç–∞ –¥–æ—Ö–æ–¥–∏!"
        )
        
        success_count = 0
        for user_id in user_ids:
            try:
                await bot.send_message(chat_id=user_id, text=reminder_text)
                success_count += 1
            except Exception as e:
                logger.error(f"Failed to send reminder to {user_id}: {e}")
        
        logger.info(f"‚úÖ Sent reminders to {success_count}/{len(user_ids)} users")
        
    except Exception as e:
        logger.error(f"Error in daily reminders task: {e}", exc_info=True)


async def check_subscription_renewals(bot: Bot):
    """–ü–µ—Ä–µ–≤—ñ—Ä—è—î –ø—ñ–¥–ø–∏—Å–∫–∏, —â–æ –º–∞—é—Ç—å –±—É—Ç–∏ –ø–æ–Ω–æ–≤–ª–µ–Ω—ñ"""
    logger.info("üìÖ Running scheduled task: subscription renewals")
    
    try:
        # –û—Ç—Ä–∏–º—É—î–º–æ –≤—Å—ñ –∞—Ä–∫—É—à—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤
        worksheets = [
            ws.title for ws in sheets_service.spreadsheet.worksheets()
            if ws.title not in ["feedback_and_suggestions", "Sheet1", "reminder_settings"]
        ]
        
        today = datetime.now().date()
        notifications_sent = 0
        
        for nickname in worksheets:
            try:
                subscriptions = sheets_service.get_subscriptions(nickname)
                transactions = sheets_service.get_all_transactions(nickname)
                
                if not transactions:
                    continue
                
                user_id = int(transactions[0].get('user_id', 0))
                
                for sub in subscriptions:
                    try:
                        due_date_str = sub.get('date', '')
                        due_date = datetime.strptime(due_date_str, "%d-%m-%Y").date()
                        
                        if due_date == today:
                            sub_name = sub.get('note', '–ü—ñ–¥–ø–∏—Å–∫–∞')
                            sub_amount = abs(float(sub.get('amount', 0)))
                            
                            message = (
                                f"üîî <b>–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –ø—Ä–æ –ø—ñ–¥–ø–∏—Å–∫—É</b>\n\n"
                                f"–°—å–æ–≥–æ–¥–Ω—ñ –º–∞—î –±—É—Ç–∏ —Å–ø–∏—Å–∞–Ω–Ω—è –∑–∞: <b>{sub_name}</b>\n"
                                f"–°—É–º–∞: <b>{sub_amount:.2f} UAH</b>\n\n"
                                f"–ß–∏ –ø—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫—É?"
                            )
                            
                            await bot.send_message(chat_id=user_id, text=message)
                            notifications_sent += 1
                            
                    except (ValueError, TypeError) as e:
                        logger.error(f"Error processing subscription date: {e}")
                        
            except Exception as e:
                logger.error(f"Error checking subscriptions for {nickname}: {e}")
        
        logger.info(f"‚úÖ Sent {notifications_sent} subscription notifications")
        
    except Exception as e:
        logger.error(f"Error in subscription renewals task: {e}", exc_info=True)


async def cleanup_old_data(bot: Bot):
    """–û—á–∏—â–∞—î —Å—Ç–∞—Ä—ñ –¥–∞–Ω—ñ (–æ–ø—Ü—ñ–æ–Ω–∞–ª—å–Ω–æ)"""
    logger.info("üìÖ Running scheduled task: data cleanup")
    # TODO: –†–µ–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —Å—Ç–∞—Ä—à–∏—Ö N –º—ñ—Å—è—Ü—ñ–≤
    pass


async def generate_weekly_report(bot: Bot):
    """–ì–µ–Ω–µ—Ä—É—î —â–æ—Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ–≤"""
    logger.info("üìÖ Running scheduled task: weekly report")
    
    try:
        worksheets = [
            ws.title for ws in sheets_service.spreadsheet.worksheets()
            if ws.title not in ["feedback_and_suggestions", "Sheet1", "reminder_settings"]
        ]
        
        for nickname in worksheets[:5]:  # –û–±–º–µ–∂—É—î–º–æ –¥–ª—è —Ç–µ—Å—Ç—É
            try:
                transactions = sheets_service.get_all_transactions(nickname)
                
                if not transactions:
                    continue
                
                user_id = int(transactions[0].get('user_id', 0))
                
                # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –æ—Å—Ç–∞–Ω–Ω—ñ–π —Ç–∏–∂–¥–µ–Ω—å
                week_ago = datetime.now().timestamp() - (7 * 24 * 60 * 60)
                week_transactions = [
                    t for t in transactions
                    if datetime.fromisoformat(t['date']).timestamp() > week_ago
                ]
                
                if not week_transactions:
                    continue
                
                total_income = sum(
                    float(t['amount']) for t in week_transactions
                    if float(t.get('amount', 0)) > 0
                )
                total_expense = sum(
                    abs(float(t['amount'])) for t in week_transactions
                    if float(t.get('amount', 0)) < 0
                )
                
                report = (
                    f"üìä <b>–¢–≤—ñ–π —Ç–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç</b>\n\n"
                    f"üìà –î–æ—Ö–æ–¥–∏: {total_income:.2f} UAH\n"
                    f"üìâ –í–∏—Ç—Ä–∞—Ç–∏: {total_expense:.2f} UAH\n"
                    f"üí∞ –†—ñ–∑–Ω–∏—Ü—è: {total_income - total_expense:.2f} UAH\n\n"
                    f"–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–∞ —Ç–∏–∂–¥–µ–Ω—å: {len(week_transactions)}"
                )
                
                await bot.send_message(chat_id=user_id, text=report)
                
            except Exception as e:
                logger.error(f"Error generating report for {nickname}: {e}")
        
        logger.info("‚úÖ Weekly reports sent")
        
    except Exception as e:
        logger.error(f"Error in weekly report task: {e}", exc_info=True)


def setup_scheduler(bot: Bot) -> AsyncIOScheduler:
    """–ù–∞–ª–∞—à—Ç–æ–≤—É—î –≤—Å—ñ –∑–∞–ø–ª–∞–Ω–æ–≤–∞–Ω—ñ –∑–∞–¥–∞—á—ñ"""
    scheduler = AsyncIOScheduler(timezone='Europe/Kiev')
    
    # –©–æ–¥–µ–Ω–Ω—ñ –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è
    for reminder_time in config.REMINDER_TIMES:
        scheduler.add_job(
            send_daily_reminders,
            trigger=CronTrigger(
                hour=reminder_time['hour'],
                minute=reminder_time['minute']
            ),
            kwargs={'bot': bot},
            id=f"reminder_{reminder_time['hour']}_{reminder_time['minute']}"
        )
    
    # –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø—ñ–¥–ø–∏—Å–æ–∫ —â–æ–¥–Ω—è –æ 9:00
    scheduler.add_job(
        check_subscription_renewals,
        trigger=CronTrigger(hour=9, minute=0),
        kwargs={'bot': bot},
        id='subscription_check'
    )
    
    # –¢–∏–∂–Ω–µ–≤–∏–π –∑–≤—ñ—Ç —É –Ω–µ–¥—ñ–ª—é –æ 18:00
    scheduler.add_job(
        generate_weekly_report,
        trigger=CronTrigger(day_of_week='sun', hour=18, minute=0),
        kwargs={'bot': bot},
        id='weekly_report'
    )
    
    # –û—á–∏—â–µ–Ω–Ω—è –¥–∞–Ω–∏—Ö —â–æ–º—ñ—Å—è—Ü—è
    scheduler.add_job(
        cleanup_old_data,
        trigger=CronTrigger(day=1, hour=3, minute=0),
        kwargs={'bot': bot},
        id='data_cleanup'
    )
    
    scheduler.start()
    logger.info("‚úÖ Scheduler configured with all tasks")
    
    return scheduler