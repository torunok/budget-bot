#FILE: app/handlers/subscriptions.py

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏
"""

import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.core.states import SubscriptionState
from app.services.sheets_service import sheets_service
from app.keyboards.inline import get_subscriptions_menu
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.validators import validate_amount, validate_date
from app.utils.formatters import format_currency

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text == "üìù –ü—ñ–¥–ø–∏—Å–∫–∏")
async def show_subscriptions_menu(message: Message):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –ø—ñ–¥–ø–∏—Å–æ–∫"""
    await message.answer(
        "üìù <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∞–º–∏</b>\n\n"
        "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à:\n"
        "‚Ä¢ –î–æ–¥–∞–≤–∞—Ç–∏ –Ω–æ–≤—ñ –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–¥–∞—Ç–∏ –≤—Å—ñ –∞–∫—Ç–∏–≤–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "‚Ä¢ –†–µ–¥–∞–≥—É–≤–∞—Ç–∏ –∞–±–æ –≤–∏–¥–∞–ª—è—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏\n\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –Ω–∞–≥–∞–¥–∞—î –ø—Ä–æ –ø–ª–∞—Ç–µ–∂—ñ!",
        reply_markup=get_subscriptions_menu()
    )


@router.callback_query(F.data == "add_subscription")
async def add_subscription_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏"""
    await callback.message.delete()
    
    msg = await callback.message.answer(
        "üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\n"
        "–ö—Ä–æ–∫ 1/4: –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É –ø—ñ–¥–ø–∏—Å–∫–∏\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>Netflix</code>"
    )
    
    await state.update_data(last_bot_message_id=msg.message_id)
    await state.set_state(SubscriptionState.add_name)
    await callback.answer()


@router.message(SubscriptionState.add_name)
async def process_subscription_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ –ø—ñ–¥–ø–∏—Å–∫–∏"""
    name = message.text.strip()
    
    if len(name) > 50:
        await message.reply("‚ùå –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    await state.update_data(name=name)
    
    data = await state.get_data()
    last_msg_id = data.get('last_bot_message_id')
    
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=last_msg_id,
            text=(
                f"üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"–ù–∞–∑–≤–∞: <b>{name}</b>\n\n"
                f"–ö—Ä–æ–∫ 2/4: –í–≤–µ–¥–∏ —Å—É–º—É –ø–ª–∞—Ç–µ–∂—É\n"
                f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>199</code>"
            )
        )
    except:
        pass
    
    await state.set_state(SubscriptionState.add_amount)


@router.message(SubscriptionState.add_amount)
async def process_subscription_amount(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å—É–º–∏ –ø—ñ–¥–ø–∏—Å–∫–∏"""
    is_valid, amount, error = validate_amount(message.text)
    
    if not is_valid:
        await message.reply(f"‚ùå {error}")
        return
    
    data = await state.get_data()
    name = data.get('name')
    
    await state.update_data(amount=amount)
    
    last_msg_id = data.get('last_bot_message_id')
    
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=last_msg_id,
            text=(
                f"üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"–ù–∞–∑–≤–∞: <b>{name}</b>\n"
                f"–°—É–º–∞: <b>{format_currency(amount)}</b>\n\n"
                f"–ö—Ä–æ–∫ 3/4: –í–≤–µ–¥–∏ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é\n"
                f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>–†–æ–∑–≤–∞–≥–∏</code>"
            )
        )
    except:
        pass
    
    await state.set_state(SubscriptionState.add_category)


@router.message(SubscriptionState.add_category)
async def process_subscription_category(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –ø—ñ–¥–ø–∏—Å–∫–∏"""
    category = message.text.strip()
    
    data = await state.get_data()
    name = data.get('name')
    amount = data.get('amount')
    
    await state.update_data(category=category)
    
    last_msg_id = data.get('last_bot_message_id')
    
    try:
        await message.bot.edit_message_text(
            chat_id=message.chat.id,
            message_id=last_msg_id,
            text=(
                f"üìù <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–ø–∏—Å–∫–∏</b>\n\n"
                f"–ù–∞–∑–≤–∞: <b>{name}</b>\n"
                f"–°—É–º–∞: <b>{format_currency(amount)}</b>\n"
                f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: <b>{category}</b>\n\n"
                f"–ö—Ä–æ–∫ 4/4: –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ —Å–ø–∏—Å–∞–Ω–Ω—è\n"
                f"–§–æ—Ä–º–∞—Ç: <code>–¥–µ–Ω—å-–º—ñ—Å—è—Ü—å-—Ä—ñ–∫</code>\n"
                f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>15-12-2024</code>"
            )
        )
    except:
        pass
    
    await state.set_state(SubscriptionState.add_date)


@router.message(SubscriptionState.add_date)
async def process_subscription_date(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –¥–∞—Ç–∏ –ø—ñ–¥–ø–∏—Å–∫–∏"""
    is_valid, date_obj, error = validate_date(message.text)
    
    if not is_valid:
        await message.reply(f"‚ùå {error}")
        return
    
    data = await state.get_data()
    name = data.get('name')
    amount = data.get('amount')
    category = data.get('category')
    nickname = message.from_user.username or "anonymous"
    
    try:
        # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–ø–∏—Å–∫—É (–≤–∏—Ç—Ä–∞—Ç–∞ –∑ –ø—Ä–∞–ø–æ—Ä—Ü–µ–º Is_Subscription)
        sheets_service.append_transaction(
            user_id=message.from_user.id,
            nickname=nickname,
            amount=-abs(amount),
            category=category,
            note=f"–ü—ñ–¥–ø–∏—Å–∫–∞: {name}",
            is_subscription=True
        )
        
        last_msg_id = data.get('last_bot_message_id')
        
        try:
            await message.bot.edit_message_text(
                chat_id=message.chat.id,
                message_id=last_msg_id,
                text=(
                    f"‚úÖ <b>–ü—ñ–¥–ø–∏—Å–∫—É –¥–æ–¥–∞–Ω–æ!</b>\n\n"
                    f"üìù –ù–∞–∑–≤–∞: <b>{name}</b>\n"
                    f"üí∞ –°—É–º–∞: <b>{format_currency(amount)}</b>\n"
                    f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: <b>{category}</b>\n"
                    f"üìÖ –î–∞—Ç–∞: <b>{message.text}</b>\n\n"
                    f"–Ø –Ω–∞–≥–∞–¥–∞—é —Ç–æ–±—ñ –ø—Ä–æ –ø–ª–∞—Ç—ñ–∂!"
                )
            )
        except:
            await message.answer(
                f"‚úÖ <b>–ü—ñ–¥–ø–∏—Å–∫—É –¥–æ–¥–∞–Ω–æ!</b>\n\n"
                f"üìù {name} - {format_currency(amount)}"
            )
        
        await message.answer(
            "–û–±–∏—Ä–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.clear()
        
        logger.info(f"Subscription added: {name} for {nickname}")
        
    except Exception as e:
        logger.error(f"Error adding subscription: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ –ø—ñ–¥–ø–∏—Å–∫–∏")


@router.callback_query(F.data == "view_subscriptions")
async def view_subscriptions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –ø—ñ–¥–ø–∏—Å–∫–∏"""
    nickname = callback.from_user.username or "anonymous"
    
    try:
        subscriptions = sheets_service.get_subscriptions(nickname)
        
        if not subscriptions:
            await callback.message.edit_text(
                "üìù –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –ø—ñ–¥–ø–∏—Å–æ–∫.\n\n"
                "–î–æ–¥–∞–π –ø–µ—Ä—à—É –ø—ñ–¥–ø–∏—Å–∫—É, —â–æ–± —è –º—ñ–≥ –Ω–∞–≥–∞–¥—É–≤–∞—Ç–∏ –ø—Ä–æ –ø–ª–∞—Ç–µ–∂—ñ!",
                reply_markup=get_subscriptions_menu()
            )
            await callback.answer()
            return
        
        text_lines = ["üìù <b>–¢–≤–æ—ó –ø—ñ–¥–ø–∏—Å–∫–∏:</b>\n"]
        
        total_monthly = 0
        
        for sub in subscriptions:
            name = sub.get('note', '–ë–µ–∑ –Ω–∞–∑–≤–∏').replace('–ü—ñ–¥–ø–∏—Å–∫–∞: ', '')
            amount = abs(float(sub.get('amount', 0)))
            category = sub.get('category', '–Ü–Ω—à–µ')
            date = sub.get('date', '')
            
            total_monthly += amount
            
            text_lines.append(
                f"\n‚Ä¢ <b>{name}</b>\n"
                f"  üí∞ {format_currency(amount)}\n"
                f"  üìÇ {category}\n"
                f"  üìÖ –î–∞—Ç–∞: {date}"
            )
        
        text_lines.append(f"\n\nüí≥ <b>–ó–∞–≥–∞–ª–æ–º –Ω–∞ –º—ñ—Å—è—Ü—å:</b> {format_currency(total_monthly)}")
        
        await callback.message.edit_text(
            "\n".join(text_lines),
            reply_markup=get_subscriptions_menu()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing subscriptions: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


