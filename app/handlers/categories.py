# ============================================
# FILE: app/handlers/categories.py (NEW)
# ============================================
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏
"""

import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.services.sheets_service import sheets_service
from app.keyboards.reply import get_main_menu_keyboard

logger = logging.getLogger(__name__)
router = Router()


def get_categories_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="üìã –ú–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó", callback_data="view_categories"),
            InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏", callback_data="add_category")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_category"),
            InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_category")
        ],
        [
            InlineKeyboardButton(text="üí∞ –ë—é–¥–∂–µ—Ç–∏", callback_data="category_budgets")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_settings")
        ]
    ])


@router.callback_query(F.data == "manage_categories")
async def show_categories_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä—ñ–π"""
    await callback.message.edit_text(
        "üìÇ <b>–£–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—è–º–∏</b>\n\n"
        "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à:\n"
        "‚Ä¢ –ü–µ—Ä–µ–≥–ª—è–Ω—É—Ç–∏ —Å–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n"
        "‚Ä¢ –î–æ–¥–∞—Ç–∏ –Ω–æ–≤—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó\n"
        "‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç–∏\n"
        "‚Ä¢ –ü–µ—Ä—Å–æ–Ω–∞–ª—ñ–∑—É–≤–∞—Ç–∏ –æ–±–ª—ñ–∫\n\n"
        "–û–±–∏—Ä–∞–π –¥—ñ—é:",
        reply_markup=get_categories_menu()
    )
    await callback.answer()


@router.callback_query(F.data == "view_categories")
async def view_categories(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    nickname = callback.from_user.username or "anonymous"
    
    try:
        expense_categories = sheets_service.get_user_categories(nickname, is_expense=True)
        income_categories = sheets_service.get_user_categories(nickname, is_expense=False)
        
        text_lines = ["üìÇ <b>–¢–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b>\n"]
        
        # –í–∏—Ç—Ä–∞—Ç–∏
        text_lines.append("\n<b>üìâ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –≤–∏—Ç—Ä–∞—Ç:</b>")
        if expense_categories:
            for cat in expense_categories:
                emoji = cat.get('emoji', 'üìå')
                name = cat.get('category_name', '')
                text_lines.append(f"  {emoji} {name}")
        else:
            text_lines.append("  <i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</i>")
        
        # –î–æ—Ö–æ–¥–∏
        text_lines.append("\n<b>üìà –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–æ—Ö–æ–¥—ñ–≤:</b>")
        if income_categories:
            for cat in income_categories:
                emoji = cat.get('emoji', 'üí∞')
                name = cat.get('category_name', '')
                text_lines.append(f"  {emoji} {name}")
        else:
            text_lines.append("  <i>–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—é—Ç—å—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</i>")
        
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
        text_lines.append("\n\n<b>üí° –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó:</b>")
        default_categories = [
            "–á–∂–∞ üçï", "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç üöó", "–†–æ–∑–≤–∞–≥–∏ üé¨",
            "–ó–¥–æ—Ä–æ–≤'—è üíä", "–û—Å–≤—ñ—Ç–∞ üìö", "–û–¥—è–≥ üëï",
            "–ö–æ–º—É–Ω–∞–ª—å–Ω—ñ üè†", "–Ü–Ω—Ç–µ—Ä–Ω–µ—Ç üåê", "–Ü–Ω—à–µ üìå"
        ]
        text_lines.append("  " + ", ".join(default_categories))
        
        await callback.message.edit_text(
            "\n".join(text_lines),
            reply_markup=get_categories_menu()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing categories: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


# ==================== –ë–Æ–î–ñ–ï–¢–ò –ü–û –ö–ê–¢–ï–ì–û–†–Ü–Ø–• ====================

@router.callback_query(F.data == "category_budgets")
async def show_category_budgets(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –±—é–¥–∂–µ—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"""
    nickname = callback.from_user.username or "anonymous"
    
    try:
        budgets = sheets_service.get_category_budgets(nickname)
        
        if not budgets:
            await callback.message.edit_text(
                "üí∞ <b>–ë—é–¥–∂–µ—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö</b>\n\n"
                "–£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—Ö –±—é–¥–∂–µ—Ç—ñ–≤.\n\n"
                "–í—Å—Ç–∞–Ω–æ–≤–∏ –ª—ñ–º—ñ—Ç –Ω–∞ –≤–∏—Ç—Ä–∞—Ç–∏ –¥–ª—è –∫–æ–∂–Ω–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó,\n"
                "—ñ –±–æ—Ç –±—É–¥–µ –ø–æ–ø–µ—Ä–µ–¥–∂–∞—Ç–∏ –ø—Ä–æ –ø–µ—Ä–µ–≤–∏—Ç—Ä–∞—Ç–∏!",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚ûï –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ –±—é–¥–∂–µ—Ç", callback_data="set_budget")],
                    [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_categories")]
                ])
            )
            await callback.answer()
            return
        
        text_lines = ["üí∞ <b>–ë—é–¥–∂–µ—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö</b>\n"]
        
        for budget in budgets:
            category = budget.get('category', '')
            limit = float(budget.get('budget_amount', 0))
            spent = float(budget.get('current_spent', 0))
            period = budget.get('period', 'monthly')
            
            percentage = (spent / limit * 100) if limit > 0 else 0
            
            # –°—Ç–∞—Ç—É—Å
            if percentage < 70:
                status = "‚úÖ"
            elif percentage < 90:
                status = "‚ö†Ô∏è"
            else:
                status = "üî¥"
            
            progress_bar = create_budget_bar(percentage)
            
            text_lines.append(
                f"\n{status} <b>{category}</b> ({period})\n"
                f"   –í–∏—Ç—Ä–∞—á–µ–Ω–æ: {spent:.0f} / {limit:.0f} UAH\n"
                f"   {progress_bar} {percentage:.1f}%"
            )
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏", callback_data="set_budget"),
                InlineKeyboardButton(text="‚úèÔ∏è –ó–º—ñ–Ω–∏—Ç–∏", callback_data="edit_budget")
            ],
            [InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="manage_categories")]
        ])
        
        await callback.message.edit_text(
            "\n".join(text_lines),
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing budgets: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


def create_budget_bar(percentage: float, length: int = 10) -> str:
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä –¥–ª—è –±—é–¥–∂–µ—Ç—É"""
    filled = int(percentage / 100 * length)
    
    if percentage < 70:
        color = "üü©"
    elif percentage < 90:
        color = "üü®"
    else:
        color = "üü•"
    
    empty = length - filled
    return color * filled + "‚¨ú" * empty