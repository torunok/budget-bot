#File: app/handlers/settings.py

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å
"""
import logging
from datetime import datetime
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile

from app.keyboards.inline import (
    get_settings_menu,
    get_reminder_settings,
    get_currency_keyboard,
    get_export_format_keyboard
)
from app.services.sheets_service import sheets_service
from app.services.export_service import export_service
from app.utils.helpers import filter_transactions_by_period

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text == "‚öôÔ∏è –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è")
async def show_settings(message: Message):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    await message.answer(
        "‚öôÔ∏è <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –±–æ—Ç–∞</b>\n\n"
        "–û–±–µ—Ä–∏, —â–æ —Ö–æ—á–µ—à –Ω–∞–ª–∞—à—Ç—É–≤–∞—Ç–∏:",
        reply_markup=get_settings_menu()
    )


@router.callback_query(F.data == "how_it_works")
async def show_how_it_works(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—é –ø—Ä–æ —Ä–æ–±–æ—Ç—É –±–æ—Ç–∞"""
    text = (
        "üìö <b>–Ø–∫ –ø—Ä–∞—Ü—é—î –±–æ—Ç</b>\n\n"

        "<b>1. –î–æ–¥–∞–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</b>\n"
        "–ü—Ä–æ—Å—Ç–æ –ø–∏—à–∏ —Å—É–º—É —Ç–∞ –æ–ø–∏—Å:\n"
        "<code>150 —ó–∂–∞</code> –∞–±–æ <code>5000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>\n\n"

        "<b>2. –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∑–∞—Ü—ñ—è</b>\n"
        "–ë–æ—Ç –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–∑–Ω–∞—á–∞—î –∫–∞—Ç–µ–≥–æ—Ä—ñ—é –∑ —Ç–≤–æ–≥–æ –æ–ø–∏—Å—É\n\n"

        "<b>3. –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞ –∞–Ω–∞–ª—ñ—Ç–∏–∫–∞</b>\n"
        "–ü–µ—Ä–µ–≥–ª—è–¥–∞–π –≤–∏—Ç—Ä–∞—Ç–∏ –∑–∞ —Ä—ñ–∑–Ω—ñ –ø–µ—Ä—ñ–æ–¥–∏,\n"
        "–æ—Ç—Ä–∏–º—É–π –¥–µ—Ç–∞–ª—å–Ω—ñ –∑–≤—ñ—Ç–∏ –∑ –≥—Ä–∞—Ñ—ñ–∫–∞–º–∏\n\n"

        "<b>4. AI-–∞–Ω–∞–ª—ñ–∑</b>\n"
        "–®—Ç—É—á–Ω–∏–π —ñ–Ω—Ç–µ–ª–µ–∫—Ç –∞–Ω–∞–ª—ñ–∑—É—î —Ç–≤–æ—ó —Ñ—ñ–Ω–∞–Ω—Å–∏\n"
        "—Ç–∞ –¥–∞—î –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ñ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü—ñ—ó\n\n"

        "<b>5. –ü—ñ–¥–ø–∏—Å–∫–∏</b>\n"
        "–î–æ–¥–∞–≤–∞–π —Ä–µ–≥—É–ª—è—Ä–Ω—ñ –ø–ª–∞—Ç–µ–∂—ñ —Ç–∞\n"
        "–æ—Ç—Ä–∏–º—É–π –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤—á–∞—Å–Ω–æ\n\n"

        "<b>6. –ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</b>\n"
        "–ó–∞–≤–∞–Ω—Ç–∞–∂—É–π —Å–≤–æ—ó –¥–∞–Ω—ñ —É CSV, Excel –∞–±–æ PDF\n\n"

        "–í—Å—ñ –¥–∞–Ω—ñ –∑–±–µ—Ä—ñ–≥–∞—é—Ç—å—Å—è –≤ Google Sheets\n"
        "—ñ –¥–æ—Å—Ç—É–ø–Ω—ñ —Ç—ñ–ª—å–∫–∏ —Ç–æ–±—ñ! üîí"
    )

    await callback.message.edit_text(text, reply_markup=get_settings_menu())
    await callback.answer()


@router.callback_query(F.data == "reminders_menu")
async def show_reminders_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å"""
    user_id = callback.from_user.id
    enabled_users = sheets_service.get_reminder_users()

    status = "‚úÖ –£–≤—ñ–º–∫–Ω–µ–Ω–æ" if user_id in enabled_users else "‚ùå –í–∏–º–∫–Ω–µ–Ω–æ"

    text = (
        "üîî <b>–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –Ω–∞–≥–∞–¥—É–≤–∞–Ω—å</b>\n\n"
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {status}\n\n"
        "–ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –¥–æ–ø–æ–º–æ–∂—É—Ç—å –Ω–µ –∑–∞–±—É–≤–∞—Ç–∏\n"
        "–∑–∞–ø–∏—Å—É–≤–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç–∏ —â–æ–¥–Ω—è.\n\n"
        "–¢–∏ –æ—Ç—Ä–∏–º–∞—î—à 3 –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è:\n"
        "‚Ä¢ 09:00 - –†–∞–Ω–æ–∫\n"
        "‚Ä¢ 13:00 - –û–±—ñ–¥\n"
        "‚Ä¢ 20:00 - –í–µ—á—ñ—Ä"
    )

    await callback.message.edit_text(text, reply_markup=get_reminder_settings())
    await callback.answer()


@router.callback_query(F.data == "enable_reminders")
async def enable_reminders(callback: CallbackQuery):
    """–í–º–∏–∫–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
    sheets_service.add_reminder_user(callback.from_user.id)

    await callback.answer("‚úÖ –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è —É–≤—ñ–º–∫–Ω–µ–Ω–æ!", show_alert=True)
    await show_reminders_menu(callback)


@router.callback_query(F.data == "disable_reminders")
async def disable_reminders(callback: CallbackQuery):
    """–í–∏–º–∏–∫–∞—î –Ω–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è"""
    sheets_service.remove_reminder_user(callback.from_user.id)

    await callback.answer("‚ùå –ù–∞–≥–∞–¥—É–≤–∞–Ω–Ω—è –≤–∏–º–∫–Ω–µ–Ω–æ", show_alert=True)
    await show_reminders_menu(callback)


@router.callback_query(F.data == "export_data")
async def show_export_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –µ–∫—Å–ø–æ—Ä—Ç—É"""
    await callback.message.edit_text(
        "üì• <b>–ï–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö</b>\n\n"
        "–û–±–µ—Ä–∏ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–≤–æ—ó—Ö –¥–∞–Ω–∏—Ö:",
        reply_markup=get_export_format_keyboard()
    )
    await callback.answer()


@router.callback_query(F.data.startswith("export_"))
async def process_export(callback: CallbackQuery):
    """–û–±—Ä–æ–±–ª—è—î –µ–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–∏—Ö"""
    format_type = callback.data.split("_")[1]
    nickname = callback.from_user.username or "anonymous"

    await callback.message.edit_text("‚è≥ –ì–æ—Ç—É—é —Ñ–∞–π–ª –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...")

    try:
        transactions = sheets_service.get_all_transactions(nickname)
        balance, currency = sheets_service.get_current_balance(nickname)

        if not transactions:
            await callback.message.edit_text(
                "‚ùå –ù–µ–º–∞—î –¥–∞–Ω–∏—Ö –¥–ª—è –µ–∫—Å–ø–æ—Ä—Ç—É",
                reply_markup=get_settings_menu()
            )
            return

        if format_type == "csv":
            file_buffer = export_service.export_to_csv(transactions)
            filename = f"budget_{nickname}_{datetime.now().strftime('%Y%m%d')}.csv"

        elif format_type == "excel":
            file_buffer = export_service.export_to_excel(transactions)
            filename = f"budget_{nickname}_{datetime.now().strftime('%Y%m%d')}.xlsx"

        elif format_type == "pdf":
            file_buffer = export_service.export_to_pdf(
                transactions, nickname, balance, currency
            )
            filename = f"budget_{nickname}_{datetime.now().strftime('%Y%m%d')}.pdf"
        else:
            await callback.answer("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ñ–æ—Ä–º–∞—Ç", show_alert=True)
            return

        # –°—Ç–≤–æ—Ä—é—î–º–æ BufferedInputFile –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏
        document = BufferedInputFile(file_buffer.getvalue(), filename=filename)

        await callback.message.answer_document(
            document=document,
            caption=f"üìä –¢–≤—ñ–π —Ñ—ñ–Ω–∞–Ω—Å–æ–≤–∏–π –∑–≤—ñ—Ç —É —Ñ–æ—Ä–º–∞—Ç—ñ {format_type.upper()}"
        )

        await callback.message.edit_text(
            "‚úÖ –§–∞–π–ª —É—Å–ø—ñ—à–Ω–æ —Å—Ç–≤–æ—Ä–µ–Ω–æ!",
            reply_markup=get_settings_menu()
        )

        logger.info(f"Exported {format_type} for {nickname}")

    except Exception as e:
        logger.error(f"Export error: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ñ–∞–π–ª—É",
            reply_markup=get_settings_menu()
        )


@router.callback_query(F.data == "back_to_settings")
async def back_to_settings(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    await show_settings(callback.message)
    await callback.answer()


def register_handlers(router_main):
    """–†–µ—î—Å—Ç—Ä—É—î —Ö–µ–Ω–¥–ª–µ—Ä–∏ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
    router_main.include_router(router)