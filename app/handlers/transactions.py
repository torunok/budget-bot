#FILE: app/handlers/transactions.py#

#–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–≤–∏—Ç—Ä–∞—Ç–∏/–¥–æ—Ö–æ–¥–∏)

"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–≤–∏—Ç—Ä–∞—Ç–∏/–¥–æ—Ö–æ–¥–∏)
"""
import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery

from app.core.states import UserState
from app.services.sheets_service import sheets_service
from app.keyboards.inline import get_transaction_edit_keyboard
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.validators import parse_transaction_input, validate_amount
from app.utils.formatters import format_currency

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text == "üìâ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É")
async def add_expense_handler(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏"""
    await message.answer(
        "üí∏ –í–≤–µ–¥–∏ —Å—É–º—É —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏:\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>150 —ó–∂–∞ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç</code>",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(UserState.add_expense)


@router.message(F.text == "üìà –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥")
async def add_income_handler(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É"""
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏ —Å—É–º—É —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Ö–æ–¥—É:\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>5000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(UserState.add_income)


@router.message(UserState.add_expense)
@router.message(UserState.add_income)
async def process_transaction(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    current_state = await state.get_state()
    is_expense = current_state == UserState.add_expense
    
    amount, note = parse_transaction_input(message.text)
    
    if amount is None:
        await message.reply(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>150 —ó–∂–∞</code>"
        )
        return
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–ø–µ—Ä—à–µ —Å–ª–æ–≤–æ –∑ –æ–ø–∏—Å—É)
    category = note.split()[0] if note else "–Ü–Ω—à–µ"
    
    # –î–æ–¥–∞—î–º–æ –∑–Ω–∞–∫ –¥–æ —Å—É–º–∏
    if is_expense and amount > 0:
        amount = -amount
    elif not is_expense and amount < 0:
        amount = abs(amount)
    
    nickname = message.from_user.username or "anonymous"
    
    try:
        row_index = sheets_service.append_transaction(
            user_id=message.from_user.id,
            nickname=nickname,
            amount=amount,
            category=category,
            note=note
        )
        
        await state.update_data(
            last_transaction_row=row_index,
            transaction_type="expense" if is_expense else "income"
        )
        
        transaction_type = "–≤–∏—Ç—Ä–∞—Ç–∞" if is_expense else "–¥–æ—Ö—ñ–¥"
        emoji = "üìâ" if is_expense else "üìà"
        
        await message.reply(
            f"{emoji} <b>–î–æ–¥–∞–Ω–æ {transaction_type}</b>\n\n"
            f"–°—É–º–∞: {format_currency(abs(amount))}\n"
            f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
            f"–û–ø–∏—Å: {note or '‚Äî'}\n\n"
            f"–•–æ—á–µ—à —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?",
            reply_markup=get_transaction_edit_keyboard()
        )
        
        await state.set_state(None)
        
    except Exception as e:
        logger.error(f"Error adding transaction: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


def register_handlers(router_main):
    """–†–µ—î—Å—Ç—Ä—É—î —Ö–µ–Ω–¥–ª–µ—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    router_main.include_router(router)


