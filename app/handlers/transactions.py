# ============================================
# FILE: app/handlers/transactions.py (COMPLETE FULL VERSION)
# ============================================
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π (–≤–∏—Ç—Ä–∞—Ç–∏/–¥–æ—Ö–æ–¥–∏) - –ü–û–í–ù–ê –í–ï–†–°–Ü–Ø
"""
import logging
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.core.states import UserState
from app.services.sheets_service import sheets_service
from app.keyboards.inline import get_transaction_edit_keyboard
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.validators import parse_transaction_input, validate_amount
from app.utils.formatters import format_currency, format_transaction_list

logger = logging.getLogger(__name__)
router = Router()


# ==================== –î–û–î–ê–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ====================

@router.message(F.text == "üìâ –î–æ–¥–∞—Ç–∏ –≤–∏—Ç—Ä–∞—Ç—É")
async def add_expense_handler(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏"""
    await message.answer(
        "üí∏ –í–≤–µ–¥–∏ —Å—É–º—É —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –≤–∏—Ç—Ä–∞—Ç–∏:\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>150 —ó–∂–∞ —Å—É–ø–µ—Ä–º–∞—Ä–∫–µ—Ç</code>\n"
        "–∞–±–æ –ø—Ä–æ—Å—Ç–æ: <code>150 —ó–∂–∞</code>",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(UserState.add_expense)


@router.message(F.text == "üìà –î–æ–¥–∞—Ç–∏ –¥–æ—Ö—ñ–¥")
async def add_income_handler(message: Message, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è –¥–æ—Ö–æ–¥—É"""
    await message.answer(
        "üí∞ –í–≤–µ–¥–∏ —Å—É–º—É —Ç–∞ –ø—Ä–∏–∑–Ω–∞—á–µ–Ω–Ω—è –¥–æ—Ö–æ–¥—É:\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>5000 –∑–∞—Ä–ø–ª–∞—Ç–∞</code>\n"
        "–∞–±–æ: <code>1500 —Ñ—Ä—ñ–ª–∞–Ω—Å</code>",
        reply_markup=get_main_menu_keyboard()
    )
    await state.set_state(UserState.add_income)


@router.message(UserState.add_expense)
@router.message(UserState.add_income)
async def process_transaction(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–≤–µ–¥–µ–Ω–æ—ó —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    current_state = await state.get_state()
    is_expense = current_state == UserState.add_expense
    
    amount, note = parse_transaction_input(message.text)
    
    if amount is None:
        await message.reply(
            "‚ùå –ù–µ–∫–æ—Ä–µ–∫—Ç–Ω–∞ —Å—É–º–∞. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑:\n"
            "–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>150 —ó–∂–∞</code>"
        )
        return
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–ø–µ—Ä—à–µ —Å–ª–æ–≤–æ –∑ –æ–ø–∏—Å—É)
    category = note.split()[0].capitalize() if note else "–Ü–Ω—à–µ"
    
    # –î–æ–¥–∞—î–º–æ –∑–Ω–∞–∫ –¥–æ —Å—É–º–∏
    if is_expense and amount > 0:
        amount = -amount
    elif not is_expense and amount < 0:
        amount = abs(amount)
    
    nickname = message.from_user.username or "anonymous"
    
    try:
        row_index = sheets_service.append_transaction(
            user_id=message.from_user.id,
            nickname=nickname,
            amount=amount,
            category=category,
            note=note
        )
        
        # –ó–±–µ—Ä—ñ–≥–∞—î–º–æ –¥–∞–Ω—ñ –¥–ª—è –º–æ–∂–ª–∏–≤–æ–≥–æ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è
        await state.update_data(
            last_transaction_row=row_index,
            transaction_type="expense" if is_expense else "income",
            amount=amount,
            category=category,
            note=note
        )
        
        transaction_type = "–≤–∏—Ç—Ä–∞—Ç–∞" if is_expense else "–¥–æ—Ö—ñ–¥"
        emoji = "üìâ" if is_expense else "üìà"
        
        # –û—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤–∏–π –±–∞–ª–∞–Ω—Å
        balance, currency = sheets_service.get_current_balance(nickname)
        
        await message.reply(
            f"{emoji} <b>–î–æ–¥–∞–Ω–æ {transaction_type}</b>\n\n"
            f"üí∞ –°—É–º–∞: {format_currency(abs(amount), currency)}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
            f"üìù –û–ø–∏—Å: {note or '‚Äî'}\n"
            f"üí≥ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(balance, currency)}\n\n"
            f"–•–æ—á–µ—à —â–æ—Å—å –∑–º—ñ–Ω–∏—Ç–∏?",
            reply_markup=get_transaction_edit_keyboard()
        )
        
        await state.set_state(None)
        
    except Exception as e:
        logger.error(f"Error adding transaction: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –¥–æ–¥–∞–≤–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó. –°–ø—Ä–æ–±—É–π —â–µ —Ä–∞–∑.")


# ==================== –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ====================

@router.callback_query(F.data == "edit_amount")
async def edit_amount_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—É–º–∏"""
    data = await state.get_data()
    current_amount = data.get('amount', 0)
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Å—É–º–∏</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ —Å—É–º–∞: {format_currency(abs(current_amount))}\n\n"
        f"–í–≤–µ–¥–∏ –Ω–æ–≤—É —Å—É–º—É:"
    )
    await state.set_state(UserState.edit_amount)
    await callback.answer()


@router.message(UserState.edit_amount)
async def process_edit_amount(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ—ó —Å—É–º–∏"""
    is_valid, amount, error = validate_amount(message.text)
    
    if not is_valid:
        await message.reply(f"‚ùå {error}")
        return
    
    data = await state.get_data()
    row_index = data.get('last_transaction_row')
    transaction_type = data.get('transaction_type')
    nickname = message.from_user.username or "anonymous"
    
    # –í–∏–∑–Ω–∞—á–∞—î–º–æ –∑–Ω–∞–∫
    if transaction_type == "expense" and amount > 0:
        amount = -amount
    elif transaction_type == "income" and amount < 0:
        amount = abs(amount)
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤ Google Sheets (–∫–æ–ª–æ–Ω–∫–∞ 3 = amount)
        sheets_service.update_transaction(nickname, row_index, 3, amount)
        
        # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∞–Ω—Å
        transactions = sheets_service.get_all_transactions(nickname)
        new_balance = sum(float(t['amount']) for t in transactions)
        balance, currency = sheets_service.get_current_balance(nickname)
        sheets_service.update_balance(nickname, new_balance, currency)
        
        await state.update_data(amount=amount)
        
        category = data.get('category', '–Ü–Ω—à–µ')
        note = data.get('note', '')
        
        await message.answer(
            f"‚úÖ <b>–°—É–º–∞ –æ–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üí∞ –ù–æ–≤–∞ —Å—É–º–∞: {format_currency(abs(amount), currency)}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
            f"üìù –û–ø–∏—Å: {note or '‚Äî'}\n"
            f"üí≥ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(new_balance, currency)}\n\n"
            f"–©–æ —â–µ –∑–º—ñ–Ω–∏—Ç–∏?",
            reply_markup=get_transaction_edit_keyboard()
        )
        
        await state.set_state(None)
        
    except Exception as e:
        logger.error(f"Error updating amount: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ —Å—É–º–∏")


@router.callback_query(F.data == "edit_category")
async def edit_category_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    data = await state.get_data()
    current_category = data.get('category', '–Ü–Ω—à–µ')
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: <b>{current_category}</b>\n\n"
        f"–í–≤–µ–¥–∏ –Ω–æ–≤—É –∫–∞—Ç–µ–≥–æ—Ä—ñ—é:\n"
        f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>–á–∂–∞</code>, <code>–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç</code>, <code>–†–æ–∑–≤–∞–≥–∏</code>"
    )
    await state.set_state(UserState.edit_category)
    await callback.answer()


@router.message(UserState.edit_category)
async def process_edit_category(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ—ó –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó"""
    new_category = message.text.strip().capitalize()
    
    if len(new_category) > 50:
        await message.reply("‚ùå –ö–∞—Ç–µ–≥–æ—Ä—ñ—è –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 50 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    data = await state.get_data()
    row_index = data.get('last_transaction_row')
    nickname = message.from_user.username or "anonymous"
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤ Google Sheets (–∫–æ–ª–æ–Ω–∫–∞ 4 = category)
        sheets_service.update_transaction(nickname, row_index, 4, new_category)
        
        await state.update_data(category=new_category)
        
        amount = data.get('amount', 0)
        note = data.get('note', '')
        balance, currency = sheets_service.get_current_balance(nickname)
        
        await message.answer(
            f"‚úÖ <b>–ö–∞—Ç–µ–≥–æ—Ä—ñ—è –æ–Ω–æ–≤–ª–µ–Ω–∞!</b>\n\n"
            f"üìÇ –ù–æ–≤–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è: {new_category}\n"
            f"üí∞ –°—É–º–∞: {format_currency(abs(amount), currency)}\n"
            f"üìù –û–ø–∏—Å: {note or '‚Äî'}\n\n"
            f"–©–æ —â–µ –∑–º—ñ–Ω–∏—Ç–∏?",
            reply_markup=get_transaction_edit_keyboard()
        )
        
        await state.set_state(None)
        
    except Exception as e:
        logger.error(f"Error updating category: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó")


@router.callback_query(F.data == "edit_description")
async def edit_description_handler(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É"""
    data = await state.get_data()
    current_note = data.get('note', '')
    
    await callback.message.edit_text(
        f"‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –æ–ø–∏—Å—É</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∏–π –æ–ø–∏—Å: <i>{current_note or '–Ω–µ–º–∞—î'}</i>\n\n"
        f"–í–≤–µ–¥–∏ –Ω–æ–≤–∏–π –æ–ø–∏—Å –∞–±–æ '-' —â–æ–± –≤–∏–¥–∞–ª–∏—Ç–∏:"
    )
    await state.set_state(UserState.edit_description)
    await callback.answer()


@router.message(UserState.edit_description)
async def process_edit_description(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å—É"""
    new_note = message.text.strip()
    
    if new_note == "-":
        new_note = ""
    
    if len(new_note) > 200:
        await message.reply("‚ùå –û–ø–∏—Å –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∏–π. –ú–∞–∫—Å–∏–º—É–º 200 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    data = await state.get_data()
    row_index = data.get('last_transaction_row')
    nickname = message.from_user.username or "anonymous"
    
    try:
        # –û–Ω–æ–≤–ª—é—î–º–æ –≤ Google Sheets (–∫–æ–ª–æ–Ω–∫–∞ 5 = note)
        sheets_service.update_transaction(nickname, row_index, 5, new_note)
        
        await state.update_data(note=new_note)
        
        amount = data.get('amount', 0)
        category = data.get('category', '–Ü–Ω—à–µ')
        balance, currency = sheets_service.get_current_balance(nickname)
        
        await message.answer(
            f"‚úÖ <b>–û–ø–∏—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"üìù –ù–æ–≤–∏–π –æ–ø–∏—Å: {new_note or '‚Äî'}\n"
            f"üí∞ –°—É–º–∞: {format_currency(abs(amount), currency)}\n"
            f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n\n"
            f"–©–æ —â–µ –∑–º—ñ–Ω–∏—Ç–∏?",
            reply_markup=get_transaction_edit_keyboard()
        )
        
        await state.set_state(None)
        
    except Exception as e:
        logger.error(f"Error updating description: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –æ–ø–∏—Å—É")


# ==================== –í–ò–î–ê–õ–ï–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–á ====================

@router.callback_query(F.data == "delete_transaction")
async def delete_transaction_confirm(callback: CallbackQuery, state: FSMContext):
    """–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    data = await state.get_data()
    amount = data.get('amount', 0)
    category = data.get('category', '')
    
    confirm_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚úÖ –¢–∞–∫, –≤–∏–¥–∞–ª–∏—Ç–∏", callback_data="confirm_delete"),
            InlineKeyboardButton(text="‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏", callback_data="cancel_delete")
        ]
    ])
    
    await callback.message.edit_text(
        f"üóëÔ∏è <b>–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è</b>\n\n"
        f"–¢–∏ –≤–ø–µ–≤–Ω–µ–Ω–∏–π, —â–æ —Ö–æ—á–µ—à –≤–∏–¥–∞–ª–∏—Ç–∏ —Ü—é —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é?\n\n"
        f"üí∞ –°—É–º–∞: {format_currency(abs(amount))}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n\n"
        f"‚ö†Ô∏è –¶—é –¥—ñ—é –Ω–µ –º–æ–∂–Ω–∞ –±—É–¥–µ —Å–∫–∞—Å—É–≤–∞—Ç–∏!",
        reply_markup=confirm_keyboard
    )
    await callback.answer()


@router.callback_query(F.data == "confirm_delete")
async def process_delete_transaction(callback: CallbackQuery, state: FSMContext):
    """–í–∏–¥–∞–ª–µ–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    data = await state.get_data()
    row_index = data.get('last_transaction_row')
    nickname = callback.from_user.username or "anonymous"
    
    try:
        # –í–∏–¥–∞–ª—è—î–º–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é
        sheets_service.delete_transaction(nickname, row_index)
        
        # –ü–µ—Ä–µ—Ä–∞—Ö–æ–≤—É—î–º–æ –±–∞–ª–∞–Ω—Å
        transactions = sheets_service.get_all_transactions(nickname)
        new_balance = sum(float(t['amount']) for t in transactions)
        balance, currency = sheets_service.get_current_balance(nickname)
        sheets_service.update_balance(nickname, new_balance, currency)
        
        await callback.message.edit_text(
            f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –≤–∏–¥–∞–ª–µ–Ω–∞</b>\n\n"
            f"üí≥ –ù–æ–≤–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(new_balance, currency)}"
        )
        
        await state.clear()
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –≥–æ–ª–æ–≤–Ω–µ –º–µ–Ω—é
        await callback.message.answer(
            "–û–±–∏—Ä–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error deleting transaction: {e}", exc_info=True)
        await callback.message.edit_text("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–∏–¥–∞–ª–µ–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó")
    
    await callback.answer()


@router.callback_query(F.data == "cancel_delete")
async def cancel_delete_transaction(callback: CallbackQuery, state: FSMContext):
    """–°–∫–∞—Å—É–≤–∞–Ω–Ω—è –≤–∏–¥–∞–ª–µ–Ω–Ω—è"""
    data = await state.get_data()
    amount = data.get('amount', 0)
    category = data.get('category', '')
    note = data.get('note', '')
    balance, currency = sheets_service.get_current_balance(
        callback.from_user.username or "anonymous"
    )
    
    await callback.message.edit_text(
        f"üí∞ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞</b>\n\n"
        f"–°—É–º–∞: {format_currency(abs(amount), currency)}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
        f"–û–ø–∏—Å: {note or '‚Äî'}\n\n"
        f"–©–æ —â–µ –∑–º—ñ–Ω–∏—Ç–∏?",
        reply_markup=get_transaction_edit_keyboard()
    )
    await callback.answer("–í–∏–¥–∞–ª–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ")


# ==================== –ó–ê–í–ï–†–®–ï–ù–ù–Ø –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø ====================

@router.callback_query(F.data == "finish_editing")
async def finish_editing_handler(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó"""
    data = await state.get_data()
    amount = data.get('amount', 0)
    category = data.get('category', '')
    note = data.get('note', '')
    balance, currency = sheets_service.get_current_balance(
        callback.from_user.username or "anonymous"
    )
    
    await callback.message.edit_text(
        f"‚úÖ <b>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è –∑–±–µ—Ä–µ–∂–µ–Ω–∞</b>\n\n"
        f"üí∞ –°—É–º–∞: {format_currency(abs(amount), currency)}\n"
        f"üìÇ –ö–∞—Ç–µ–≥–æ—Ä—ñ—è: {category}\n"
        f"üìù –û–ø–∏—Å: {note or '‚Äî'}\n"
        f"üí≥ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(balance, currency)}"
    )
    
    await state.clear()
    
    await callback.message.answer(
        "–û–±–∏—Ä–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
        reply_markup=get_main_menu_keyboard()
    )
    
    await callback.answer("‚úÖ –ì–æ—Ç–æ–≤–æ!")


# ==================== –ü–ï–†–ï–ì–õ–Ø–î –û–°–¢–ê–ù–ù–Ü–• –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ====================

@router.callback_query(F.data == "view_recent_transactions")
async def view_recent_transactions(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ 10 —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π"""
    nickname = callback.from_user.username or "anonymous"
    
    try:
        transactions = sheets_service.get_all_transactions(nickname)
        
        if not transactions:
            await callback.answer("–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –ø–æ–∫–∏ –Ω–µ–º–∞—î", show_alert=True)
            return
        
        # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10 (–≤ –∑–≤–æ—Ä–æ—Ç–Ω–æ–º—É –ø–æ—Ä—è–¥–∫—É)
        recent = list(reversed(transactions))[:10]
        
        formatted = format_transaction_list(recent, limit=10)
        balance, currency = sheets_service.get_current_balance(nickname)
        
        await callback.message.edit_text(
            f"üìú <b>–û—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó</b>\n\n"
            f"{formatted}\n\n"
            f"üí≥ –ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(balance, currency)}"
        )
        
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing transactions: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)