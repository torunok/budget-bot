# ============================================
# FILE: app/handlers/goals.py (NEW)
# ============================================
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü—ñ–ª—è–º–∏ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å
"""

import logging
from datetime import datetime, timedelta
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton

from app.core.states import BudgetGoalState
from app.services.sheets_service import sheets_service
from app.keyboards.reply import get_main_menu_keyboard
from app.utils.validators import validate_amount, validate_date
from app.utils.formatters import format_currency

logger = logging.getLogger(__name__)
router = Router()


# ==================== –ì–û–õ–û–í–ù–ï –ú–ï–ù–Æ –¶–Ü–õ–ï–ô ====================

def get_goals_menu() -> InlineKeyboardMarkup:
    """–ú–µ–Ω—é —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Ü—ñ–ª—è–º–∏"""
    return InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –î–æ–¥–∞—Ç–∏ —Ü—ñ–ª—å", callback_data="add_goal"),
            InlineKeyboardButton(text="üìä –ú–æ—ó —Ü—ñ–ª—ñ", callback_data="view_goals")
        ],
        [
            InlineKeyboardButton(text="üí∞ –í–Ω–µ—Å—Ç–∏ –≥—Ä–æ—à—ñ", callback_data="contribute_to_goal"),
            InlineKeyboardButton(text="üìà –ü—Ä–æ–≥—Ä–µ—Å", callback_data="goals_progress")
        ],
        [
            InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–≥—É–≤–∞—Ç–∏", callback_data="edit_goals"),
            InlineKeyboardButton(text="üóëÔ∏è –í–∏–¥–∞–ª–∏—Ç–∏", callback_data="delete_goals")
        ]
    ])


@router.message(F.text == "üéØ –¶—ñ–ª—ñ")
async def show_goals_menu(message: Message):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Ü—ñ–ª–µ–π"""
    nickname = message.from_user.username or "anonymous"
    
    try:
        goals = sheets_service.get_goals(nickname)
        active_goals = len([g for g in goals if not g.get('completed', False)])
        
        text = (
            "üéØ <b>–¶—ñ–ª—ñ –∑–∞–æ—â–∞–¥–∂–µ–Ω—å</b>\n\n"
            f"üìä –ê–∫—Ç–∏–≤–Ω–∏—Ö —Ü—ñ–ª–µ–π: {active_goals}\n\n"
            "–¢—É—Ç —Ç–∏ –º–æ–∂–µ—à:\n"
            "‚Ä¢ –í—Å—Ç–∞–Ω–æ–≤–ª—é–≤–∞—Ç–∏ —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ü—ñ–ª—ñ\n"
            "‚Ä¢ –í—ñ–¥—Å—Ç–µ–∂—É–≤–∞—Ç–∏ –ø—Ä–æ–≥—Ä–µ—Å\n"
            "‚Ä¢ –†–æ–±–∏—Ç–∏ –≤–Ω–µ—Å–∫–∏\n"
            "‚Ä¢ –û—Ç—Ä–∏–º—É–≤–∞—Ç–∏ –º–æ—Ç–∏–≤–∞—Ü—ñ—é!\n\n"
            "–û–±–∏—Ä–∞–π –¥—ñ—é:"
        )
        
        await message.answer(text, reply_markup=get_goals_menu())
        
    except Exception as e:
        logger.error(f"Error showing goals menu: {e}", exc_info=True)
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Ü—ñ–ª–µ–π")


# ==================== –î–û–î–ê–í–ê–ù–ù–Ø –ù–û–í–û–á –¶–Ü–õ–Ü ====================

@router.callback_query(F.data == "add_goal")
async def add_goal_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ –¥–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ"""
    await callback.message.edit_text(
        "üéØ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è –Ω–æ–≤–æ—ó —Ü—ñ–ª—ñ</b>\n\n"
        "–ö—Ä–æ–∫ 1/3: –í–≤–µ–¥–∏ –Ω–∞–∑–≤—É —Ü—ñ–ª—ñ\n\n"
        "–ù–∞–ø—Ä–∏–∫–ª–∞–¥:\n"
        "‚Ä¢ <code>–í—ñ–¥–ø—É—Å—Ç–∫–∞ –≤ –Ñ–≤—Ä–æ–ø—ñ</code>\n"
        "‚Ä¢ <code>–ù–æ–≤–∏–π –Ω–æ—É—Ç–±—É–∫</code>\n"
        "‚Ä¢ <code>–ü–æ–¥—É—à–∫–∞ –±–µ–∑–ø–µ–∫–∏</code>"
    )
    await state.set_state(BudgetGoalState.set_goal_name)
    await callback.answer()


@router.message(BudgetGoalState.set_goal_name)
async def process_goal_name(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –Ω–∞–∑–≤–∏ —Ü—ñ–ª—ñ"""
    name = message.text.strip()
    
    if len(name) > 100:
        await message.reply("‚ùå –ù–∞–∑–≤–∞ –∑–∞–Ω–∞–¥—Ç–æ –¥–æ–≤–≥–∞. –ú–∞–∫—Å–∏–º—É–º 100 —Å–∏–º–≤–æ–ª—ñ–≤.")
        return
    
    await state.update_data(goal_name=name)
    
    await message.answer(
        f"üéØ <b>–î–æ–¥–∞–≤–∞–Ω–Ω—è —Ü—ñ–ª—ñ: {name}</b>\n\n"
        f"–ö—Ä–æ–∫ 2/3: –Ø–∫–∞ —Å—É–º–∞ –ø–æ—Ç—Ä—ñ–±–Ω–∞?\n\n"
        f"–í–≤–µ–¥–∏ —Ü—ñ–ª—å —É –≥—Ä–∏–≤–Ω—è—Ö:\n"
        f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>50000</code>"
    )
    
    await state.set_state(BudgetGoalState.set_goal_amount)


@router.message(BudgetGoalState.set_goal_amount)
async def process_goal_amount(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ —Å—É–º–∏ —Ü—ñ–ª—ñ"""
    is_valid, amount, error = validate_amount(message.text)
    
    if not is_valid:
        await message.reply(f"‚ùå {error}")
        return
    
    data = await state.get_data()
    goal_name = data.get('goal_name')
    
    await state.update_data(goal_amount=amount)
    
    await message.answer(
        f"üéØ <b>–¶—ñ–ª—å: {goal_name}</b>\n"
        f"üí∞ –°—É–º–∞: {format_currency(amount)}\n\n"
        f"–ö—Ä–æ–∫ 3/3: –î–æ —è–∫–æ—ó –¥–∞—Ç–∏ —Ö–æ—á–µ—à –¥–æ—Å—è–≥—Ç–∏?\n\n"
        f"–í–≤–µ–¥–∏ –¥–∞—Ç—É —É —Ñ–æ—Ä–º–∞—Ç—ñ <code>–¥–µ–Ω—å-–º—ñ—Å—è—Ü—å-—Ä—ñ–∫</code>\n"
        f"–ù–∞–ø—Ä–∏–∫–ª–∞–¥: <code>31-12-2025</code>\n\n"
        f"–ê–±–æ –≤—ñ–¥–ø—Ä–∞–≤ <code>-</code>, —è–∫—â–æ –¥–µ–¥–ª–∞–π–Ω –Ω–µ –≤–∞–∂–ª–∏–≤–∏–π"
    )
    
    await state.set_state(BudgetGoalState.set_goal_deadline)


@router.message(BudgetGoalState.set_goal_deadline)
async def process_goal_deadline(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –¥–µ–¥–ª–∞–π–Ω—É —Ü—ñ–ª—ñ"""
    deadline_str = message.text.strip()
    deadline = None
    
    if deadline_str != "-":
        is_valid, date_obj, error = validate_date(deadline_str)
        
        if not is_valid:
            await message.reply(f"‚ùå {error}")
            return
        
        if date_obj < datetime.now():
            await message.reply("‚ùå –î–∞—Ç–∞ –Ω–µ –º–æ–∂–µ –±—É—Ç–∏ –≤ –º–∏–Ω—É–ª–æ–º—É")
            return
        
        deadline = date_obj.strftime("%Y-%m-%d")
    
    data = await state.get_data()
    goal_name = data.get('goal_name')
    goal_amount = data.get('goal_amount')
    nickname = message.from_user.username or "anonymous"
    
    try:
        # –î–æ–¥–∞—î–º–æ —Ü—ñ–ª—å
        sheets_service.add_goal(
            nickname=nickname,
            goal_name=goal_name,
            target_amount=goal_amount,
            deadline=deadline,
            current_amount=0
        )
        
        # –†–æ–∑—Ä–∞—Ö–æ–≤—É—î–º–æ —Å–∫—ñ–ª—å–∫–∏ –¥–Ω—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—å
        days_left = ""
        if deadline:
            deadline_date = datetime.strptime(deadline, "%Y-%m-%d")
            days = (deadline_date - datetime.now()).days
            days_left = f"\n‚è∞ –ó–∞–ª–∏—à–∏–ª–æ—Å—å –¥–Ω—ñ–≤: {days}"
        
        await message.answer(
            f"‚úÖ <b>–¶—ñ–ª—å —Å—Ç–≤–æ—Ä–µ–Ω–∞!</b>\n\n"
            f"üéØ –ù–∞–∑–≤–∞: {goal_name}\n"
            f"üí∞ –°—É–º–∞: {format_currency(goal_amount)}\n"
            f"üìÖ –î–µ–¥–ª–∞–π–Ω: {deadline or '–±–µ–∑ –æ–±–º–µ–∂–µ–Ω—å'}"
            f"{days_left}\n\n"
            f"–¢—Ä–∏–º–∞–π—Å—è –ø–ª–∞–Ω—É —ñ –≤—Å–µ –≤–∏–π–¥–µ! üí™",
            reply_markup=get_main_menu_keyboard()
        )
        
        await state.clear()
        
        logger.info(f"Goal created: {goal_name} for {nickname}")
        
    except Exception as e:
        logger.error(f"Error creating goal: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —Å—Ç–≤–æ—Ä–µ–Ω–Ω—ñ —Ü—ñ–ª—ñ")


# ==================== –ü–ï–†–ï–ì–õ–Ø–î –¶–Ü–õ–ï–ô ====================

@router.callback_query(F.data == "view_goals")
async def view_goals(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –≤—Å—ñ —Ü—ñ–ª—ñ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞"""
    nickname = callback.from_user.username or "anonymous"
    
    try:
        goals = sheets_service.get_goals(nickname)
        
        if not goals:
            await callback.message.edit_text(
                "üéØ –£ —Ç–µ–±–µ –ø–æ–∫–∏ –Ω–µ–º–∞—î —Ü—ñ–ª–µ–π.\n\n"
                "–°—Ç–≤–æ—Ä–∏ –ø–µ—Ä—à—É —Ü—ñ–ª—å, —â–æ–± –ø–æ—á–∞—Ç–∏ –∑–∞–æ—â–∞–¥–∂—É–≤–∞—Ç–∏!",
                reply_markup=get_goals_menu()
            )
            await callback.answer()
            return
        
        text_lines = ["üéØ <b>–¢–≤–æ—ó —Ñ—ñ–Ω–∞–Ω—Å–æ–≤—ñ —Ü—ñ–ª—ñ:</b>\n"]
        
        for idx, goal in enumerate(goals, 1):
            name = goal.get('goal_name', '–ë–µ–∑ –Ω–∞–∑–≤–∏')
            target = float(goal.get('target_amount', 0))
            current = float(goal.get('current_amount', 0))
            deadline = goal.get('deadline', '–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω—É')
            completed = goal.get('completed', False)
            
            # –ü—Ä–æ–≥—Ä–µ—Å
            progress_pct = (current / target * 100) if target > 0 else 0
            progress_bar = create_progress_bar(progress_pct)
            
            # –°—Ç–∞—Ç—É—Å
            status = "‚úÖ –î–æ—Å—è–≥–Ω—É—Ç–æ!" if completed else "üîÑ –í –ø—Ä–æ—Ü–µ—Å—ñ"
            
            # –î–µ–¥–ª–∞–π–Ω
            deadline_text = ""
            if deadline and deadline != "–ë–µ–∑ –¥–µ–¥–ª–∞–π–Ω—É":
                try:
                    deadline_date = datetime.strptime(deadline, "%Y-%m-%d")
                    days_left = (deadline_date - datetime.now()).days
                    if days_left > 0:
                        deadline_text = f"\n   ‚è∞ {days_left} –¥–Ω—ñ–≤"
                    elif days_left == 0:
                        deadline_text = "\n   ‚è∞ –°—å–æ–≥–æ–¥–Ω—ñ!"
                    else:
                        deadline_text = "\n   ‚è∞ –ü—Ä–æ—Å—Ç—Ä–æ—á–µ–Ω–æ"
                except:
                    pass
            
            text_lines.append(
                f"\n<b>{idx}. {name}</b> {status}\n"
                f"   üí∞ {format_currency(current)} / {format_currency(target)}\n"
                f"   {progress_bar} {progress_pct:.1f}%"
                f"{deadline_text}"
            )
        
        await callback.message.edit_text(
            "\n".join(text_lines),
            reply_markup=get_goals_menu()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error viewing goals: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


def create_progress_bar(percentage: float, length: int = 10) -> str:
    """–°—Ç–≤–æ—Ä—é—î –ø—Ä–æ–≥—Ä–µ—Å-–±–∞—Ä"""
    filled = int(percentage / 100 * length)
    empty = length - filled
    return "üü©" * filled + "‚¨ú" * empty


# ==================== –í–ù–ï–°–û–ö –î–û –¶–Ü–õ–Ü ====================

@router.callback_query(F.data == "contribute_to_goal")
async def contribute_to_goal_start(callback: CallbackQuery, state: FSMContext):
    """–í–∏–±—ñ—Ä —Ü—ñ–ª—ñ –¥–ª—è –≤–Ω–µ—Å–∫—É"""
    nickname = callback.from_user.username or "anonymous"
    
    try:
        goals = sheets_service.get_goals(nickname)
        active_goals = [g for g in goals if not g.get('completed', False)]
        
        if not active_goals:
            await callback.answer("–ù–µ–º–∞—î –∞–∫—Ç–∏–≤–Ω–∏—Ö —Ü—ñ–ª–µ–π", show_alert=True)
            return
        
        # –°—Ç–≤–æ—Ä—é—î–º–æ –∫–ª–∞–≤—ñ–∞—Ç—É—Ä—É –∑ —Ü—ñ–ª—è–º–∏
        buttons = []
        for idx, goal in enumerate(active_goals):
            name = goal.get('goal_name', f'–¶—ñ–ª—å {idx+1}')
            buttons.append([
                InlineKeyboardButton(
                    text=name,
                    callback_data=f"contribute_{idx}"
                )
            ])
        
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_goals")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            "üí∞ <b>–í–Ω–µ—Å–æ–∫ –¥–æ —Ü—ñ–ª—ñ</b>\n\n"
            "–û–±–µ—Ä–∏ —Ü—ñ–ª—å, –¥–æ —è–∫–æ—ó —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏ –≥—Ä–æ—à—ñ:",
            reply_markup=keyboard
        )
        
        await state.update_data(active_goals=active_goals)
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error in contribute start: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


@router.callback_query(F.data.startswith("contribute_"))
async def contribute_amount_request(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø–∏—Ç —Å—É–º–∏ –≤–Ω–µ—Å–∫—É"""
    goal_idx = int(callback.data.split("_")[1])
    data = await state.get_data()
    goals = data.get('active_goals', [])
    
    if goal_idx >= len(goals):
        await callback.answer("‚ùå –¶—ñ–ª—å –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ", show_alert=True)
        return
    
    goal = goals[goal_idx]
    await state.update_data(selected_goal_idx=goal_idx)
    
    target = float(goal.get('target_amount', 0))
    current = float(goal.get('current_amount', 0))
    remaining = target - current
    
    await callback.message.edit_text(
        f"üí∞ <b>–í–Ω–µ—Å–æ–∫ –¥–æ: {goal.get('goal_name')}</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∏–π –ø—Ä–æ–≥—Ä–µ—Å: {format_currency(current)} / {format_currency(target)}\n"
        f"–ó–∞–ª–∏—à–∏–ª–æ—Å—å: {format_currency(remaining)}\n\n"
        f"–°–∫—ñ–ª—å–∫–∏ —Ö–æ—á–µ—à –¥–æ–¥–∞—Ç–∏?\n"
        f"–í–≤–µ–¥–∏ —Å—É–º—É:"
    )
    
    await state.set_state(BudgetGoalState.view_progress)
    await callback.answer()


@router.message(BudgetGoalState.view_progress)
async def process_contribution(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –≤–Ω–µ—Å–∫—É"""
    is_valid, amount, error = validate_amount(message.text)
    
    if not is_valid:
        await message.reply(f"‚ùå {error}")
        return
    
    data = await state.get_data()
    goals = data.get('active_goals', [])
    goal_idx = data.get('selected_goal_idx', 0)
    nickname = message.from_user.username or "anonymous"
    
    try:
        goal = goals[goal_idx]
        goal_name = goal.get('goal_name')
        current = float(goal.get('current_amount', 0))
        target = float(goal.get('target_amount', 0))
        
        new_amount = current + amount
        completed = new_amount >= target
        
        # –û–Ω–æ–≤–ª—é—î–º–æ —Ü—ñ–ª—å
        sheets_service.update_goal_progress(
            nickname=nickname,
            goal_name=goal_name,
            new_amount=new_amount,
            completed=completed
        )
        
        # –í—ñ–¥–Ω—ñ–º–∞—î–º–æ –∑ –±–∞–ª–∞–Ω—Å—É
        sheets_service.append_transaction(
            user_id=message.from_user.id,
            nickname=nickname,
            amount=-amount,
            category="–ó–∞–æ—â–∞–¥–∂–µ–Ω–Ω—è",
            note=f"–í–Ω–µ—Å–æ–∫ –¥–æ —Ü—ñ–ª—ñ: {goal_name}"
        )
        
        progress_pct = (new_amount / target * 100) if target > 0 else 0
        
        if completed:
            await message.answer(
                f"üéâüéâüéâ <b>–í–Ü–¢–ê–Ñ–ú–û!</b> üéâüéâüéâ\n\n"
                f"–¢–∏ –¥–æ—Å—è–≥ —Ü—ñ–ª—ñ: <b>{goal_name}</b>\n"
                f"üí∞ –ù–∞–∫–æ–ø–∏—á–µ–Ω–æ: {format_currency(new_amount)}\n\n"
                f"–ü—Ä–æ–¥–æ–≤–∂—É–π –≤ —Ç–æ–º—É –∂ –¥—É—Å—ñ! üöÄ"
            )
        else:
            remaining = target - new_amount
            await message.answer(
                f"‚úÖ <b>–í–Ω–µ—Å–æ–∫ –¥–æ–¥–∞–Ω–æ!</b>\n\n"
                f"üéØ –¶—ñ–ª—å: {goal_name}\n"
                f"üí∞ –î–æ–¥–∞–Ω–æ: {format_currency(amount)}\n"
                f"üìä –ü—Ä–æ–≥—Ä–µ—Å: {progress_pct:.1f}%\n"
                f"üìâ –ó–∞–ª–∏—à–∏–ª–æ—Å—å: {format_currency(remaining)}\n\n"
                f"–¢–∞–∫ —Ç—Ä–∏–º–∞—Ç–∏! üí™"
            )
        
        await state.clear()
        
        await message.answer(
            "–û–±–∏—Ä–∞–π –Ω–∞—Å—Ç—É–ø–Ω—É –¥—ñ—é:",
            reply_markup=get_main_menu_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error processing contribution: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≤–Ω–µ—Å–∫—É")


# ==================== –ù–ê–ó–ê–î ====================

@router.callback_query(F.data == "back_to_goals")
async def back_to_goals(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ –º–µ–Ω—é —Ü—ñ–ª–µ–π"""
    await show_goals_menu(callback.message)
    await callback.answer()