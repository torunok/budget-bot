# ============================================
# FILE: app/handlers/statistics.py 
# ============================================
"""
–û–±—Ä–æ–±–Ω–∏–∫–∏ –¥–ª—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ - –ü–û–í–ù–ê –í–ï–†–°–Ü–Ø
"""
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, BufferedInputFile, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext

from app.services.sheets_service import sheets_service
from app.services.chart_service import chart_service
from app.keyboards.inline import get_stats_period_keyboard
from app.utils.formatters import format_statistics, format_currency
from app.utils.helpers import filter_transactions_by_period
from app.utils.validators import validate_amount
from app.core.states import UserState

logger = logging.getLogger(__name__)
router = Router()


@router.message(F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: Message):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    nickname = message.from_user.username or "anonymous"
    
    try:
        balance, currency = sheets_service.get_current_balance(nickname)
        transactions = sheets_service.get_all_transactions(nickname)
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ —Å—å–æ–≥–æ–¥–Ω—ñ—à–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
        today_transactions = filter_transactions_by_period(
            [t for t in transactions if not t.get('Is_Subscription')],
            'today'
        )
        
        stats_text = format_statistics(today_transactions, currency)
        
        message_text = (
            f"üí∞ <b>–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å:</b> {format_currency(balance, currency)}\n\n"
            f"<b>–°—å–æ–≥–æ–¥–Ω—ñ:</b>\n{stats_text}\n\n"
            f"–û–±–µ—Ä–∏ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –¥–µ—Ç–∞–ª—å–Ω–æ—ó —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏:"
        )
        
        await message.answer(
            message_text,
            reply_markup=get_stats_period_keyboard()
        )
        
    except Exception as e:
        logger.error(f"Error showing statistics: {e}", exc_info=True)
        await message.answer("‚ùå –ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")


@router.callback_query(F.data.startswith("stats_"))
async def show_period_statistics(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∑–∞ –æ–±—Ä–∞–Ω–∏–π –ø–µ—Ä—ñ–æ–¥"""
    period = callback.data.split("_")[1]
    nickname = callback.from_user.username or "anonymous"
    
    try:
        transactions = sheets_service.get_all_transactions(nickname)
        
        # –§—ñ–ª—å—Ç—Ä—É—î–º–æ –∑–∞ –ø–µ—Ä—ñ–æ–¥–æ–º
        period_transactions = filter_transactions_by_period(
            [t for t in transactions if not t.get('Is_Subscription')],
            period
        )
        
        if not period_transactions:
            await callback.answer("–ó–∞ —Ü–µ–π –ø–µ—Ä—ñ–æ–¥ –Ω–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π", show_alert=True)
            return
        
        balance, currency = sheets_service.get_current_balance(nickname)
        stats_text = format_statistics(period_transactions, currency)
        
        period_names = {
            'today': '–°—å–æ–≥–æ–¥–Ω—ñ',
            'yesterday': '–í—á–æ—Ä–∞',
            '7days': '–ó–∞ 7 –¥–Ω—ñ–≤',
            '14days': '–ó–∞ 14 –¥–Ω—ñ–≤',
            'month': '–ó–∞ –º—ñ—Å—è—Ü—å',
            'year': '–ó–∞ —Ä—ñ–∫'
        }
        
        message_text = (
            f"üìä <b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞: {period_names.get(period, period)}</b>\n\n"
            f"üí∞ –ë–∞–ª–∞–Ω—Å: {format_currency(balance, currency)}\n\n"
            f"{stats_text}"
        )
        
        await callback.message.edit_text(
            message_text,
            reply_markup=get_stats_period_keyboard()
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing period statistics: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


# ==================== –ì–†–ê–§–Ü–ö–ò ====================

@router.callback_query(F.data == "show_charts")
async def show_charts_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –º–µ–Ω—é –≤–∏–±–æ—Ä—É –≥—Ä–∞—Ñ—ñ–∫—ñ–≤"""
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="ü•ß –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö", callback_data="chart_pie_expense"),
            InlineKeyboardButton(text="üí∞ –î–æ—Ö–æ–¥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö", callback_data="chart_pie_income")
        ],
        [
            InlineKeyboardButton(text="üìà –î–∏–Ω–∞–º—ñ–∫–∞ (30 –¥–Ω—ñ–≤)", callback_data="chart_line_30"),
            InlineKeyboardButton(text="üìä –î–∏–Ω–∞–º—ñ–∫–∞ (90 –¥–Ω—ñ–≤)", callback_data="chart_line_90")
        ],
        [
            InlineKeyboardButton(text="üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –ø–æ –º—ñ—Å—è—Ü—è—Ö", callback_data="chart_bar_comparison")
        ],
        [
            InlineKeyboardButton(text="üí≥ –Ü—Å—Ç–æ—Ä—ñ—è –±–∞–ª–∞–Ω—Å—É", callback_data="chart_balance_history")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats")
        ]
    ])
    
    await callback.message.edit_text(
        "üìä <b>–ì—Ä–∞—Ñ—ñ–∫–∏ —Ç–∞ –≤—ñ–∑—É–∞–ª—ñ–∑–∞—Ü—ñ—è</b>\n\n"
        "–û–±–µ—Ä–∏ —Ç–∏–ø –≥—Ä–∞—Ñ—ñ–∫–∞:",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("chart_"))
async def generate_chart(callback: CallbackQuery):
    """–ì–µ–Ω–µ—Ä—É—î –æ–±—Ä–∞–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫"""
    chart_type = callback.data.replace("chart_", "")
    nickname = callback.from_user.username or "anonymous"
    
    # –ü–æ–∫–∞–∑—É—î–º–æ —ñ–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è
    await callback.answer("‚è≥ –ì–µ–Ω–µ—Ä—É—é –≥—Ä–∞—Ñ—ñ–∫...", show_alert=False)
    await callback.message.edit_text("üìä –ì–µ–Ω–µ—Ä—É—é –≥—Ä–∞—Ñ—ñ–∫, –∑–∞—á–µ–∫–∞–π...")
    
    try:
        transactions = sheets_service.get_all_transactions(nickname)
        balance, currency = sheets_service.get_current_balance(nickname)
        
        # –ì–µ–Ω—É—Ä—É—î–º–æ –≤—ñ–¥–ø–æ–≤—ñ–¥–Ω–∏–π –≥—Ä–∞—Ñ—ñ–∫
        if chart_type == "pie_expense":
            buffer = chart_service.create_pie_chart(transactions, "expense")
            caption = "ü•ß –í–∏—Ç—Ä–∞—Ç–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"
        
        elif chart_type == "pie_income":
            buffer = chart_service.create_pie_chart(transactions, "income")
            caption = "üí∞ –î–æ—Ö–æ–¥–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è—Ö"
        
        elif chart_type == "line_30":
            buffer = chart_service.create_line_chart(transactions, 30)
            caption = "üìà –î–∏–Ω–∞–º—ñ–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ –∑–∞ 30 –¥–Ω—ñ–≤"
        
        elif chart_type == "line_90":
            buffer = chart_service.create_line_chart(transactions, 90)
            caption = "üìä –î–∏–Ω–∞–º—ñ–∫–∞ —Ñ—ñ–Ω–∞–Ω—Å—ñ–≤ –∑–∞ 90 –¥–Ω—ñ–≤"
        
        elif chart_type == "bar_comparison":
            buffer = chart_service.create_bar_comparison(transactions, currency)
            caption = "üìä –ü–æ—Ä—ñ–≤–Ω—è–Ω–Ω—è –¥–æ—Ö–æ–¥—ñ–≤ —Ç–∞ –≤–∏—Ç—Ä–∞—Ç –ø–æ –º—ñ—Å—è—Ü—è—Ö"
        
        elif chart_type == "balance_history":
            buffer = chart_service.create_balance_history(transactions, currency)
            caption = "üí≥ –Ü—Å—Ç–æ—Ä—ñ—è –±–∞–ª–∞–Ω—Å—É"
        
        else:
            await callback.message.edit_text("‚ùå –ù–µ–≤—ñ–¥–æ–º–∏–π —Ç–∏–ø –≥—Ä–∞—Ñ—ñ–∫–∞")
            return
        
        # –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ –≥—Ä–∞—Ñ—ñ–∫
        photo = BufferedInputFile(buffer.getvalue(), filename="chart.png")
        
        await callback.message.answer_photo(
            photo=photo,
            caption=caption
        )
        
        # –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ –º–µ–Ω—é
        await show_charts_menu(callback)
        
        logger.info(f"Chart generated: {chart_type} for {nickname}")
        
    except Exception as e:
        logger.error(f"Error generating chart: {e}", exc_info=True)
        await callback.message.edit_text(
            "‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü—ñ—ó –≥—Ä–∞—Ñ—ñ–∫–∞.\n"
            "–ú–æ–∂–ª–∏–≤–æ, –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –¥–∞–Ω–∏—Ö."
        )


# ==================== –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –ë–ê–õ–ê–ù–°–£ ====================

@router.callback_query(F.data == "edit_balance_menu")
async def edit_balance_menu(callback: CallbackQuery):
    """–ú–µ–Ω—é —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"""
    nickname = callback.from_user.username or "anonymous"
    balance, currency = sheets_service.get_current_balance(nickname)
    
    keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="‚ûï –ó–±—ñ–ª—å—à–∏—Ç–∏", callback_data="balance_increase"),
            InlineKeyboardButton(text="‚ûñ –ó–º–µ–Ω—à–∏—Ç–∏", callback_data="balance_decrease")
        ],
        [
            InlineKeyboardButton(text="üîÑ –í—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ —Ç–æ—á–Ω–æ", callback_data="balance_set")
        ],
        [
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats")
        ]
    ])
    
    await callback.message.edit_text(
        f"üí≥ <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É</b>\n\n"
        f"–ü–æ—Ç–æ—á–Ω–∏–π –±–∞–ª–∞–Ω—Å: {format_currency(balance, currency)}\n\n"
        f"‚ö†Ô∏è –í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π —Ü—é —Ñ—É–Ω–∫—Ü—ñ—é –æ–±–µ—Ä–µ–∂–Ω–æ!\n"
        f"–ö—Ä–∞—â–µ –¥–æ–¥–∞–≤–∞—Ç–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó —á–µ—Ä–µ–∑ –º–µ–Ω—é.\n\n"
        f"–©–æ —Ö–æ—á–µ—à –∑—Ä–æ–±–∏—Ç–∏?",
        reply_markup=keyboard
    )
    await callback.answer()


@router.callback_query(F.data.startswith("balance_"))
async def balance_edit_start(callback: CallbackQuery, state: FSMContext):
    """–ü–æ—á–∞—Ç–æ–∫ —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"""
    action = callback.data.replace("balance_", "")
    
    await state.update_data(balance_action=action)
    
    if action == "increase":
        text = "‚ûï <b>–ó–±—ñ–ª—å—à–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É</b>\n\n–ù–∞ —è–∫—É —Å—É–º—É –∑–±—ñ–ª—å—à–∏—Ç–∏?"
    elif action == "decrease":
        text = "‚ûñ <b>–ó–º–µ–Ω—à–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É</b>\n\n–ù–∞ —è–∫—É —Å—É–º—É –∑–º–µ–Ω—à–∏—Ç–∏?"
    else:  # set
        text = "üîÑ <b>–í—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É</b>\n\n–í–≤–µ–¥–∏ –Ω–æ–≤—É —Å—É–º—É –±–∞–ª–∞–Ω—Å—É:"
    
    await callback.message.edit_text(text)
    await state.set_state(UserState.edit_balance)
    await callback.answer()


@router.message(UserState.edit_balance)
async def process_balance_edit(message: Message, state: FSMContext):
    """–û–±—Ä–æ–±–∫–∞ –∑–º—ñ–Ω–∏ –±–∞–ª–∞–Ω—Å—É"""
    is_valid, amount, error = validate_amount(message.text)
    
    if not is_valid:
        await message.reply(f"‚ùå {error}")
        return
    
    data = await state.get_data()
    action = data.get('balance_action')
    nickname = message.from_user.username or "anonymous"
    
    try:
        balance, currency = sheets_service.get_current_balance(nickname)
        
        if action == "increase":
            new_balance = balance + amount
            change_text = f"–∑–±—ñ–ª—å—à–µ–Ω–æ –Ω–∞ {format_currency(amount, currency)}"
        elif action == "decrease":
            new_balance = balance - amount
            change_text = f"–∑–º–µ–Ω—à–µ–Ω–æ –Ω–∞ {format_currency(amount, currency)}"
        else:  # set
            new_balance = amount
            change_text = f"–≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ {format_currency(amount, currency)}"
        
        # –û–Ω–æ–≤–ª—é—î–º–æ –±–∞–ª–∞–Ω—Å
        sheets_service.update_balance(nickname, new_balance, currency)
        
        # –î–æ–¥–∞—î–º–æ –∫–æ—Ä–∏–≥—É—é—á—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è —ñ—Å—Ç–æ—Ä—ñ—ó
        adjustment = new_balance - balance
        sheets_service.append_transaction(
            user_id=message.from_user.id,
            nickname=nickname,
            amount=adjustment,
            category="–ö–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è",
            note=f"–†—É—á–Ω–µ –∫–æ—Ä–∏–≥—É–≤–∞–Ω–Ω—è –±–∞–ª–∞–Ω—Å—É"
        )
        
        await message.answer(
            f"‚úÖ <b>–ë–∞–ª–∞–Ω—Å –æ–Ω–æ–≤–ª–µ–Ω–æ!</b>\n\n"
            f"–ü–æ–ø–µ—Ä–µ–¥–Ω—ñ–π: {format_currency(balance, currency)}\n"
            f"–ù–æ–≤–∏–π: {format_currency(new_balance, currency)}\n\n"
            f"–ó–º—ñ–Ω–∞: {change_text}"
        )
        
        await state.clear()
        
    except Exception as e:
        logger.error(f"Error updating balance: {e}", exc_info=True)
        await message.reply("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –æ–Ω–æ–≤–ª–µ–Ω–Ω—ñ –±–∞–ª–∞–Ω—Å—É")


# ==================== –†–ï–î–ê–ì–£–í–ê–ù–ù–Ø –¢–†–ê–ù–ó–ê–ö–¶–Ü–ô ====================

@router.callback_query(F.data == "edit_transactions")
async def edit_transactions_menu(callback: CallbackQuery):
    """–ü–æ–∫–∞–∑—É—î –æ—Å—Ç–∞–Ω–Ω—ñ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è"""
    nickname = callback.from_user.username or "anonymous"
    
    try:
        transactions = sheets_service.get_all_transactions(nickname)
        
        if not transactions:
            await callback.answer("–ù–µ–º–∞—î —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è", show_alert=True)
            return
        
        # –ë–µ—Ä–µ–º–æ –æ—Å—Ç–∞–Ω–Ω—ñ 10
        recent = list(reversed(transactions))[:10]
        
        buttons = []
        for idx, t in enumerate(recent):
            date = t.get('date', '')[:10]
            amount = float(t.get('amount', 0))
            category = t.get('category', '')
            note = t.get('note', '')[:20]
            
            emoji = "üìâ" if amount < 0 else "üìà"
            text = f"{emoji} {date} | {abs(amount):.0f} | {category}"
            
            buttons.append([
                InlineKeyboardButton(
                    text=text,
                    callback_data=f"edit_tr_{idx}"
                )
            ])
        
        buttons.append([
            InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back_to_stats")
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=buttons)
        
        await callback.message.edit_text(
            "‚úèÔ∏è <b>–†–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π</b>\n\n"
            "–û–±–µ—Ä–∏ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—é –¥–ª—è —Ä–µ–¥–∞–≥—É–≤–∞–Ω–Ω—è:",
            reply_markup=keyboard
        )
        await callback.answer()
        
    except Exception as e:
        logger.error(f"Error showing transactions for edit: {e}", exc_info=True)
        await callback.answer("‚ùå –ü–æ–º–∏–ª–∫–∞", show_alert=True)


# ==================== –ù–ê–ó–ê–î ====================

@router.callback_query(F.data == "back_to_stats")
async def back_to_stats(callback: CallbackQuery):
    """–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –¥–æ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
    await show_statistics(callback.message)
    await callback.answer()